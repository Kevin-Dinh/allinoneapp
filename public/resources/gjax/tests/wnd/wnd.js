/**
 * created 10/07/2013
 * 
 * @author jukrop
 * @see http://livedocs.dojotoolkit.org/util/doh
 * @description unit test for module "gjax/wnd"
 * 
 * @generated by TemplateWizard, v.2013/01/03 //do not remove this comment please
 */
define([
	"doh",
	"require",
	//tested libraries
	"gjax/wnd",
	"dojo/Deferred",
	"dojo/_base/lang",
	"gjax/uri/Uri",
	"dojo/promise/all"
], function(doh, require, wnd, Deferred, lang, Uri, all) {

	// ---------------------------- test object ------------------
	// private functions

	var W_F = "width=100,height=100";

	var urls = {
		child1 : Uri.resolve(null, require.toUrl("./child1.html")),
		child2 : Uri.resolve(null, require.toUrl("./child2.html")),
		child1WithQuery : Uri.resolve(null, require.toUrl("./child1.html") + "?a=5&b=x")
	};

	function _open() {
		var d = new Deferred();

		var wndReady = function(name) {
			d.resolve(name);
		};
		var args = Array.prototype.slice.call(arguments, 0);
		if (args.length == 1 && args[0] && typeof args[0] == "object") {
			args[0].onReady = wndReady;
			args[0].features = args[0].features || W_F;
		} else {
			args[6] = wndReady;
			args[3] = args[3] || W_F;
		}
		var w = wnd.open.apply(wnd, args);
		if (w) {
			d.window = w;
		} else {
			d.reject("Turn off popup blocker and repeat test");
		}
		return d;
	}

	function createTest(name, runTest) {
		return {
			name : name,
			setUp : function() {
			},
			runTest : runTest,
			tearDown : function() {
				if (this.w && !this.w.closed && this.w != window) {
					this.w.close();
				}
				if (this.wnds) {
					for (var i = 0; i < this.wnds.length; i++) {
						var w = this.wnds[i];
						if (w && !w.closed && w != window) {
							w.close();
						}
					}
				}
			},
			// longer timeout, child window must be fully loaded
			timeout : 5000
		};
	}

	function isBlank(name) {
		return name == null || name === "" && name == "_blank";
	}

	var bigObj = {
		number : 456.31,
		string : "abc",
		"strange prop _\"'?+" : 0,
		"null" : null,
		nested : {
			arr : [
				1,
				2,
				//undefined, // TODO cannot test this right now - problem in IE9: [1,2,,3] and [1,2,undefined,3] are not considered equal by doh.is()
				"a"
			]
		}
	};

	// test object
	var testObj = {
		"window must have name" : function() {
			doh.f(isBlank(window.name), "current window.name is empty");
		},
		"open blank" : function() {
			this.w = wnd.open();
			doh.t(this.w != null, "turn off popup blocker and repeat test");
			doh.f(isBlank(this.w.name), "new window's window.name is empty");
			doh.is(this.w.opener.name, window.name, "this window should be opener of new window");
		},
		"open empty name" : function() {
			var w = wnd.open("", null, "", W_F);
			try {
				doh.f(isBlank(w.name), "new window's window.name is empty");
			} finally {
				w.close();
			}
			w = wnd.open("", null, null, W_F);
			try {
				doh.f(isBlank(w.name), "New window's window.name is empty");
			} finally {
				w.close();
			}
			w = wnd.open("", null, "_blank", W_F);
			try {
				doh.f(isBlank(w.name), "New window's window.name is empty");
			} finally {
				w.close();
			}
		},
		"open with name" : function() {
			var wName = "žaba_ťava_vôl";
			this.w = wnd.open("", null, wName, W_F);
			doh.is(wName, this.w.name, "New window's window.name is not " + wName);
		},
		"open with illegal name" : function() {
			var wName = "ab cd";
			try {
				this.w = wnd.open("", null, wName, W_F);
				doh.t(false, "Window should not be open with illegal name " + this.w.name);
			} catch (e) {
				doh.is("Assertion failed: IllegalArgument, name cannot contain any blank spaces or dashes", //
				e.message, "Whitespaces should not be allowed in window name");
			}
			// this is illegal in IE9
			wName = "žaba-ťava-vôl";
			try {
				this.w = wnd.open("", null, wName, W_F);
				doh.t(false, "Window should not be open with illegal name " + this.w.name);
			} catch (e) {
				doh.is("Assertion failed: IllegalArgument, name cannot contain any blank spaces or dashes", //
				e.message, "Whitespaces should not be allowed in window name");
			}
		},
		"open with existing name" : function() {
			this.w = wnd.open(urls.child1, null, "child1", W_F);
			var w2 = wnd.open(urls.child1, null, "child1", W_F);
			doh.t(this.w === w2, "Second window should be opened in first because they have the same name");
		},
		"open with non-existing name" : function() {
			this.w = wnd.open(urls.child1, null, "child1", W_F);
			var w2 = wnd.open(urls.child1, null, "child1b", W_F);
			doh.t(this.w !== w2, "Second window should not be opened in first because they have different names");
			w2.close();
		},
		// TODO: window features test missing, is there a way to check features of opened window?
//		"open with features" : function() {			
//		},
		"open with illegal features" : function() {
			var features = "žaba ťava vôl"; // string with whitespaces
			try {
				this.w = wnd.open({
					features : features
				});
				doh.t(false, "Window should not be open with illegal features " + features);
			} catch (e) {
				doh.is("Assertion failed: IllegalArgument, features cannot contain any blank spaces", e.message,
						"Whitespaces in should not be allowed in window features");
			}
			features = {
				a : "žaba ťava vôl" // string with whitespaces
			};
			try {
				this.w = wnd.open({
					features : features
				});
				doh.t(false, "Window should not be open with illegal features " + features);
			} catch (e) {
				doh.is("Assertion failed: IllegalArgument, features cannot contain any blank spaces", e.message,
						"Whitespaces in should not be allowed in window features");
			}

		},
		"open with onReady callback" : function() {
			// we test onReady callback first, because later on we rely on it via wraped _open (see above)
			var dfd = new Deferred();
			var w = this.w = wnd.open({
				url : urls.child1,
				onReady : function() {
					try {
						doh.f(isBlank(w.name), "New window's window.name is empty");
						doh.is(window.name, w.opener.name, "This window should be opener of new window");
						doh.isNot(null, w.wnd, "New window has no access to gjax/wnd");
						dfd.resolve();
					} catch (err) {
						dfd.reject(err);
					}
				},
				features : W_F
			});
			if (this.w == null) {
				dfd.reject("Turn off popup blocker and repeat test");
			}
			return dfd;
		},
		"open with args, no callback" : function() {

			var ready = _open(urls.child1, lang.mixin(null, bigObj));
			var w = this.w = ready.window;
			return ready.then(function() {
				var wArgs = w.wnd.getArguments();
				doh.is(bigObj, wArgs, "Wnd arguments not passed correctly");

				var wRet = w.wnd.doCallback();
				doh.is(null, wRet, "Empty callback should return undefined");
			});
		},
		"open with nonserializable args" : function() {
			var badArgs = {
				that : this
			};
			try {
				wnd.open(urls.child1, badArgs);
				doh.t(false, "Should not accept arguments not serializable to JSON");
			} catch (err) {
				doh.t(err.message.match(/\bcircular\b/i));
			}
		},
		"open with illegal args" : function() {
			var args = "abc";
			try {
				this.w = wnd.open("", args);
				doh.t(false, "Window should not be open with args " + args);
			} catch (e) {
				doh.is("Assertion failed: IllegalArgument, args type: " + typeof args, //
				e.message, "Args must be object or null");
			}
		},
		"open with callback, no args" : function() {
			var ret = {
				a : 6,
				b : 4
			};

			var ready = _open({
				url : urls.child1,
				callback : function(inArgs) {
					doh.is(bigObj, inArgs, "Wnd doCallback arguments not passed correctly");
					return lang.mixin(null, ret);
				}
			});
			var w = this.w = ready.window;
			return ready.then(function() {
				var wArgs = w.wnd.getArguments();
				doh.is(null, wArgs, "Wnd arguments not passed correctly");

				var wRet = w.wnd.doCallback(bigObj);
				doh.is(ret, wRet, "Wnd doCallback did not return correctly");

				// can be safely run more than once
				wRet = w.wnd.doCallback(bigObj);
				doh.is(ret, wRet, "Wnd doCallback did not return correctly second time");
			});
		},
		"open with named callbacks" : function() {
			var args1 = "a1", args2 = null, argsAll = "a3";
			var ret1 = "r1", ret2 = "r2";

			var ready = _open({
				url : urls.child1,
				callback : {
					c1 : function(inArgs) {
						if (!doh.is(argsAll, inArgs, null, true)) {
							doh.is(args1, inArgs, "Wnd doCallback arguments not passed correctly");
						}
						return ret1;
					},
					c2 : function(inArgs) {
						if (!doh.is(argsAll, inArgs, null, true)) {
							doh.is(args2, inArgs, "Wnd doCallback arguments not passed correctly");
						}
						return ret2;
					},
					c3 : function(inArgs) {
						if (!doh.is(argsAll, inArgs, null, true)) {
							doh.is(undefined, inArgs, "Wnd doCallback arguments not passed correctly");
						}
					}
				}
			});
			var w = this.w = ready.window;
			return ready.then(function() {
				var wRet = w.wnd.doCallback(args1, "c1"); // callback c1
				doh.is(ret1, wRet, "Wnd doCallback did not return correctly for named callback");

				wRet = w.wnd.doCallback(args2, "c2"); // callback c2
				doh.is(ret2, wRet, "Wnd doCallback did not return correctly for named callback");

				wRet = w.wnd.doCallback(undefined, "c3"); // callback c3
				doh.is(undefined, wRet, "Wnd doCallback did not return correctly for named callback");

				wRet = w.wnd.doCallback(argsAll); // all callbacks
				doh.is({
					c1 : ret1,
					c2 : ret2,
					c3 : undefined
				}, wRet, "Wnd doCallback did not return correctly for all callbacks");
			});
		},
		"open with callback, call it with nonserializable args" : function() {
			var badArgs = {
				that : this
			};

			var ready = _open({
				url : urls.child1,
				callback : function() {
					return badArgs; // return nonserializable
				}
			});
			var w = this.w = ready.window;
			return ready //
			.then(function() {
				// TEST 1 
				w.wnd.doCallback(badArgs); // call with non-serializable					
			}).then(function() {
				// TEST 1 fails (error was expected)
				throw new Error("Callback should not accept arguments not serializable to JSON");
			}, function(err) {
				// TEST 1 succeeds (if correct error)
				doh.t(err.message.match(/\bcircular\b/i));
			}) //
			.then(function() {
				// TEST 2
				w.wnd.doCallback(); // returns nonserializable
			}).then(function() {
				// TEST 2 fails (error was expected)
				throw new Error("Callback should throw when returning data not serializable to JSON");
			}, function(err) {
				// TEST 2 succeeds (if correct error)
				doh.t(err.message.match(/\bcircular\b/i));
			});
		},
		"open with callback, throw error from callback" : function() {
			var ready = _open({
				url : urls.child1,
				callback : function() {
					throw new Error("callback test error");
				}
			});
			var w = this.w = ready.window;
			return ready.then(function() {
				w.wnd.doCallback(); // throws error inside
			}).then(function() {
				throw new Error("Error from callback should propagate");
			}, function(err) {
				doh.is("callback test error", err.message, "Wrong error from callback");
			});
		},
		"open with illegal callback" : function() {
			var callback = "abc", fn = function() {
			};
			try {
				this.w = wnd.open({
					callback : callback
				});
				doh.t(false, "Window should not be open with callback " + callback);
			} catch (e) {
				doh.is("Assertion failed: IllegalArgument, callback type: " + typeof callback, //
				e.message, "Callback must be function, object or null");
			}
			try {
				this.w = wnd.open({
					callback : {
						b : fn,
						a : callback
					}
				});
				doh.t(false, "Window should not be open with callback " + callback);
			} catch (e) {
				doh.is("Assertion failed: IllegalArgument, callback type: " + typeof callback, //
				e.message, "Callback in object must be function or null");
			}
			try {
				this.w = wnd.open({
					onReady : callback
				});
				doh.t(false, "Window should not be open with readyCallback " + callback);
			} catch (e) {
				doh.is("Assertion failed: IllegalArgument, readyCallback type: " + typeof callback, //
				e.message, "ReadyCallback must be function or null");
			}
			try {
				this.w = wnd.open({
					onClose : callback
				});
				doh.t(false, "Window should not be open with closeCallback " + callback);
			} catch (e) {
				doh.is("Assertion failed: IllegalArgument, closeCallback type: " + typeof callback, //
				e.message, "CloseCallback must be function or null");
			}
		},
		// TODO onClose test not working, not sure why
//		"open with onClose callback" : function() {
//			var ready = _open({
//				url : urls.child1,
//				onClose : function() {
//					testResult.resolve();
//				}
//			});
//			var w = this.w = ready.window;
//			return ready.then(function() {
//				w.close(); // onClose callback
////				w.wnd._doCloseCallback();
//			});
//		},
//		"open with onClose callback & return value" : function() {
//			var ready = _open({
//				url : urls.child1,
//				onClose : function(retVal) {
//					try {
//						doh.is(bigObj, retVal, "Wnd 'returned value' is incorrect");
//					} catch (err) {
//						testResult.reject(err);
//					}
//					testResult.resolve();
//				}
//			});
//			var w = this.w = ready.window;
//			return ready.then(function() {
//				w.wnd.returnValue(bigObj); // runs onClose callback
//			});
//		}
		findWndsByUri : function() {
			// this is only trivial test because all windows are opened by this one
			// TODO setup complex test where secondary windows will open tertiary windows (and so on), 
			// and then some windows in the hierarchy are closed

			// TODO uncomment w3, w4

			var ready1 = _open(urls.child1), w1 = ready1.window; // child 1 uri
			var ready2 = _open(urls.child2), w2 = ready2.window; // child 2 uri
//			var ready3 = _open(urls.child1), w3 = ready3.window; // child 1 uri again
			//var ready4 = _open(urls.child1WithQuery), w4 = ready4.window; // child 1 uri with query
			this.wnds = [ // for tearDown
				w1,
				w2
			];

			return all([
				ready1,
				ready2
			/*, ready3, ,ready4*/]).then(function() {
				doh.is(w1.name, (wnd.findWndsByUri(Uri.resolve(null, urls.child1)) || {}).name, "Window not found by uri");
				doh.is(w2.name, (wnd.findWndsByUri(Uri.resolve(null, urls.child2)) || {}).name, "Window not found by uri");
//				doh.is(w4.name, (wnd.findWndsByUri(Uri.resolve(null, urls.child1WithQuery)) || {}).name, "Window not found by uri");
			});
		},
		_serializeFeatures : function() {
			// since we don't test opening windows with features, atleast test this private API
			var data = [
				null,
				null,
				"",
				"",
				"a=p: ^  &:867.8", // does nothing to strings
				"a=p: ^  &:867.8",
				{},
				"",
				{
					a : 1,
					b : true,
					c : false
				},
				"a=1,b=yes,c=no",
				{
					d : "great duck of doom"
				},
				"d=great duck of doom" // does not validate content, this is of course invalid (whitespaces)
			];

			for (var i = 0; i < data.length; i += 2) {
				var input = data[i], expected = data[i + 1];
				var output = wnd._serializeFeatures(input);
				doh.is(expected, output, "Unexpected _serializeFeatures result");
			}
		}

	// TODO can we test "closeWithParent" option? 
	};

	var tests = [];
	for ( var name in testObj) {
		tests.push(createTest(name, testObj[name]));
	}

	doh.register("gjax/wnd", tests);

});
