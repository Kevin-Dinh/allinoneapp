/**
 * created 10/13/2012
 * 
 * @author jukrop
 * @see http://livedocs.dojotoolkit.org/util/doh
 * @description gjax/uri/Uri DOH test
 * 
 * @generated by TemplateWizard, v.2012/10/01 //do not remove this comment please
 */
define([
	"doh",
	"require",
	"gjax/store/SchemaStore",
	"gjax/uri/Uri",
	"dojo/_base/lang",
	"dojo/request/util",
	"dojo/Deferred",
	"dojo/when",
	"dojox/lang/functional",
	"dojo/json",
	"dojo/_base/config",
	"gjax/request/jsonXhr"
], function(doh, require, SchemaStore, Uri, lang, requestUtil, Deferred, when, df, json, config, request) {

	var CTX_PREFIX = Uri.getPath(Uri.resolve(null, require.toUrl("."))); //set path to this test's folder as ctx prefix, so paths to (and in) smd may be root relative to this folder
	lang.mixin(config, {
		svcCtxPrefix : CTX_PREFIX
	});
	// ---------------------------- test object ------------------
	// private functions

	function queryToObject(str) {
		var queryObj = {}, parts = decodeURIComponent(str).split("&");
		for (var i = 0; i < parts.length; i++) {
			var keyVal = parts[i].split("=");
			queryObj[keyVal[0]] = keyVal[1];
		}
		return queryObj;
	}

	function dummyResponse() {
		var d = new Deferred();
		d.response = when({
			getHeader : function() {
			}
		});
		d.resolve();
		return d;
	}

	// testing data
	var date = new Date(2002, 2, 30, 6, 35, 22, 50); // 2 is March (3)
	var isoDateTime = "2002-03-30T06:35:22.050+01:00", // time zone added only for date-time format
	isoDate = "2002-03-30", //
	isoTime = "T06:35:22.050";

	// test object
	var test = {
		"date/time in matrix identity" : function() {
			// Relevant SMD part:
			//	"identity":[
			//		"dateTime=${dateTime:date-time};date=${date:date};time=${time:time}",
			//		"dateTime=${dateTime}",
			//		"id"
			//	],

			var store = new SchemaStore({
				smd : "/_mocks/schemaStore/smds/dateTime.smd.json",
				request : request,
				schemaRequest : request
			});

			return when(store._ensureSchema()).then(function() {
				var expectedId = "dateTime=2002-03-30T06:35:22.050+01:00;date=2002-03-30;time=T06:35:22.050";
				var id = store.getIdentity({
					dateTime : date,
					date : date,
					time : date
				}, true);
				doh.is(expectedId, id, "Wrong format of matrix id");

				// NOTE: following will not work, there is no such thing asdefault date format for date in matrixes yet

//				expectedId = "dateTime=2002-03-30T06:35:22.050+01:00";
//				id = store.getIdentity({
//					dateTime : date, // default format
//					date : date // not present in this id combination
//				});
//				doh.is(expectedId, id, "Wrong format of matrix id");
			});
		},
		"date/time in query" : function() {
			// Relevant SMD part:
			// "query":{
			//		"templates": {
			//			"default": "[&eq(dateTime,*date-time)?&eq(date,*date)?&eq(time,*time)]+"
			//		}
			//	},

			var testRequest = function(url, options) {
				var query = queryToObject(Uri.getQuery(url));
				doh.is(isoDateTime, query.dateTime, "Wrong date-time format in query");
				if (options.requestIdentifier != "dateTimeOnly") { // custom flag for this test
					doh.is(isoDate, query.date, "Wrong date format in query");
					doh.is(isoTime, query.time, "Wrong time format in query");
					doh.is(3, df.keys(query).length, "Unexpected data in query " + json.stringify(query));
				} else {
					doh.is(1, df.keys(query).length, "Unexpected data in query " + json.stringify(query));
				}
				return dummyResponse();
			};
			requestUtil.addCommonMethods(testRequest); // adds post/put/get/del

			var store = new SchemaStore({
				smd : "/_mocks/schemaStore/smds/dateTime.smd.json",
				request : testRequest,
				schemaRequest : request
			});

			return store.query({
				dateTime : date,
				date : date,
				time : date,
				_template : "full"
			}).then(function() {
				return store.query({
					dateTime : date, // default format
					date : date, // not present in template
					_template : "dateTime"
				}, {
					requestIdentifier : "dateTimeOnly" // misuse of 'requestIdentifier' to pass custom testing flag ...
				});
			});
		},
		"date/time in create payload" : function() {
			// Relevant SMD part:
			//	"add":{
			//		"additionalProperties":false,
			//		"properties":{
			//			"dateTime":{
			//				"format":"date-time",
			//				"type":"string"
			//			},
			//			"date":{
			//				"format":"date",
			//				"type":"string"
			//			},
			//			"time":{
			//				"format":"time",
			//				"type":"string"
			//			}
			//		}
			//	},

			var testRequest = function(url, options) {
				var data = options.data;

				doh.is(isoDateTime, data.dateTime, "Wrong date-time format in payload");
				doh.is(isoDate, data.date, "Wrong date format in payload");
				doh.is(isoTime, data.time, "Wrong time format in payload");
				doh.is(3, df.keys(data).length, "Unexpected data in payload " + json.stringify(data));

				return dummyResponse();
			};
			requestUtil.addCommonMethods(testRequest); // adds post/put/get/del

			var store = new SchemaStore({
				smd : "/_mocks/schemaStore/smds/dateTime.smd.json",
				request : testRequest,
				schemaRequest : request
			});

			return store.add({
				dateTime : date,
				date : date,
				time : date
			});
		},
		"date/time in update payload" : function() {
			// Relevant SMD part:
			//	"put":{
			//		"additionalProperties":false,
			//		"properties":{
			//			"dateTime":{
			//				"format":"date-time",
			//				"type":"string"
			//			},
			//			"date":{
			//				"format":"date",
			//				"type":"string"
			//			},
			//			"time":{
			//				"format":"time",
			//				"type":"string"
			//			}
			//		}
			//	},

			var testRequest = function(url, options) {
				var data = options.data;

				doh.is(isoDateTime, data.dateTime, "Wrong date-time format in payload");
				doh.is(isoDate, data.date, "Wrong date format in payload");
				doh.is(isoTime, data.time, "Wrong time format in payload");
				doh.is(3, df.keys(data).length, "Unexpected data in payload " + json.stringify(data));

				return dummyResponse();
			};
			requestUtil.addCommonMethods(testRequest); // adds post/put/get/del

			var store = new SchemaStore({
				smd : "/_mocks/schemaStore/smds/dateTime.smd.json",
				request : testRequest,
				schemaRequest : request
			});

			return store.put({
				id : "abc",
				dateTime : date,
				date : date,
				time : date
			}, {
				id : "abc"
			});
		}
	};
	var origSvcCtxPrefix = config.svcCtxPrefix;
	doh.register("gjax/store/SchemaStore-date and time formats", test, function() {
		//SETUP
		var CTX_PREFIX = Uri.getPath(Uri.resolve(null, require.toUrl("."))); //set path to this test's folder as ctx prefix, so paths to (and in) smd may be root relative to this folder
		config.svcCtxPrefix = CTX_PREFIX;
	}, function() {
		//TEAR DOWN
		config.svcCtxPrefix = origSvcCtxPrefix;
	});
});
