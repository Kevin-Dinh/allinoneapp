/**
 * created 01/08/2013
 * 
 * @author marcus
 * 
 * @description unit test for module "gjax/store/LazyMemory"
 * 
 * @generated by TemplateWizard, v.2012/11/21 //do not remove this comment please
 * @see http://livedocs.dojotoolkit.org/util/doh
 */
define([
	"require",
	"doh",
	"dojo/request",
	"dojo/request/script",
	"dojo/store/Memory",
	"dojo/when",
	"dojo/promise/Promise",
	//tested libraries
	"gjax/store/LazyMemory",
	"gjax/uri/Uri"
], function(require, doh, request, script, Memory, when, Promise, LazyMemory, Uri) {

	var uri = Uri.resolve(null, require.toUrl("./_mocks/rsd.json"));

	function assertQueryResults(valueOrPromise) { //this has been missing chack, query must return QueryResults not any Promise
		doh.t("total" in valueOrPromise, "Expected QueryResults");
	}

	var testObject = {

		requestThenMemoryStore : function() {
			// this would be traditional way (suggested by arakovsky)
			var storeReady = request(uri, { //run query, regardless if needed !!!
				handleAs : "json"
			}).then(function(data) {
				return new Memory({
					data : data,
					idProperty : "id"
				});
			});
			when(storeReady, function(store) {
				var queryResult = store.query({}, {});
				console.log("requestThenMemoryStore.queryResult:", queryResult);
				// grid.setStore(store); //set store when ready
			});
		},

		queryLazyMemory : function() {
			// but we (marcus, beliansky) want it the other/hard way round

			var store = new LazyMemory({
				idProperty : "bean",
				dataFunction : function() {
					return request(uri, { // this is NOT called now but later, when grid/chart,widget queries the store 
						handleAs : "json"
					});
				}
			});
			var queryResultReady = store.query({
				bean : "acquaitance"
			});
			doh.t(queryResultReady instanceof Promise, "Promise expected on first .query() call");
			assertQueryResults(queryResultReady);

			return queryResultReady.then(function(queryData) {
				console.log("queryLazyMemory.queryData:", queryData);
				doh.t(queryData.length == 1 && queryData[0].bean === "acquaitance");
				// query store again
				// alhough promise was already resolved, LazyMemory will always return promise
				var queryResultReady2 = store.query({
					bean : "download"
				});
				doh.t(queryResultReady2 instanceof Promise, "Promise expected on second .query() call as well");

				return queryResultReady2.then(function(queryData) {
					doh.t(queryData.length == 1 && queryData[0].bean === "download");
				});
			});
		},

		getLazyMemory : function() {
			var store = new LazyMemory({
				idProperty : "bean",
				dataFunction : function() {
					return request(uri, { // this is NOT called now but later, when grid/chart,widget queries the store 
						handleAs : "json"
					});
				}
			});

			var getResultReady = store.get("download");
			doh.t(getResultReady instanceof Promise, "Promise expected on first .get() call");

			return getResultReady.then(function(result) {
				console.log("getLazyMemory.result:", result);
				doh.t((result || {}).bean === "download", "Expecting some data or bad query result");
				// get store again
				// expected promise, LazyMemory will always return promise

				// query store again
				// alhough promise was already resolved, query will always return promise
				var getResultReady2 = store.get("download");
				doh.t(getResultReady2 instanceof Promise, "Promise expected on second .get() call as well");

				return getResultReady2.then(function(result) {
					doh.t((result || {}).bean === "download", "Expecting some data or bad query result");
				});
			});
		},

		resetLazyMemory : function() {
			var counter;
			var store = new LazyMemory({
				dataFunction : function() {
					counter++;
					return when([]);
				}
			});

			counter = 0;
			store.query();
			store.reset();
			store.query();

			doh.is(2, counter);
		},

		setStoreLazyMemory : function() {
			//TODO
		}
	// comented out browserscope link not working
	/*"Cross Site Lazy Memory" : function() {
		// how to create store with data from other domain
		var browserScopeId = "agt1YS1wcm9maWxlcnINCxIEVGVzdBjmwaQTDA";
		var store = new LazyMemory({ // TODO: refactor to BrowserScopeStore.js
			dataFunction : function() {
				return script("http://www.browserscope.org/user/tests/table/" + browserScopeId + "?o=json", {
					jsonp : "callback"
				}, true).then(function(data) {
					return [ // just transform to something reasonable
						data
					];
				});
			},
			idProperty : "browser"
		});
		return store.query().then(function(data) {
			console.log("crossSiteLazyMemory.query(all):", data);
		});
	}*/
	};
	// --------------------------------------
	doh.register("gajx/store/Lazy", testObject);
});