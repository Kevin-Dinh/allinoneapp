/**
 * created 01/15/2013
 * 
 * @author mbeliansky
 * 
 * @description unit test for module "gjax/store/GenericQueryEngine"
 * 
 * @generated by TemplateWizard, v.2012/11/21 //do not remove this comment please
 * @see http://livedocs.dojotoolkit.org/util/doh
 */
define([
	"require",
	"dojo/ready",
	"doh",
	"dojo/_base/array",
	"dojo/request",
	"dojo/when",
	"gjax/store/LazyMemory",
	//tested libraries
	"gjax/store/GenericQueryEngine",
	"gjax/uri/Uri"
], function(require, ready, doh, array, request, when, LazyMemory, GenericQueryEngine, Uri) {

	var uri = Uri.resolve(null, require.toUrl("./_mocks/rsd.json"));

	// operators for generic query engine
	var operators = {
		_filterByProperty : function(data, property) { // [1]
			return array.filter(data, function(item) {
				return item.bean === property;
			});
		},
		findByAddress : function(data) {
			return this._filterByProperty(data, "address");
		},
		"find by beans without methods" : function(data) {
			return array.filter(data, function(item) {
				return !item.methods.length;
			});
		}
	};

	// lazy store with generic query engine
	var store = new LazyMemory({
		idProperty : "bean",
		queryEngine : GenericQueryEngine(operators),
		dataFunction : function() {
			return request(uri, {
				handleAs : "json"
			});
		}
	});

	var genericQueryEngineWithLazyMemory = {
		"empty query" : function() {
			var testResult = new doh.Deferred();
			when(store.query(), function(result) {
				console.log(">GenericQueryEngine/empty query:", result);
				doh.assertTrue(result.length == 69, "Expected length after empty query = 69");
				testResult.callback(result);
			});
			return testResult;
		},
		"query with fn name" : function() {
			var testResult = new doh.Deferred();
			when(store.query("find by beans without methods"), function(result) {
				console.log(">GenericQueryEngine/find by methods count-name:", result);
				doh.assertTrue(result.length == 2, "Expected length after query = 2");
				testResult.callback(result);
			});
			return testResult;
		},
		"query with fn pointer" : function() {
			var testResult = new doh.Deferred();
			when(store.query(operators.findByAddress), function(result) {
				console.log(">GenericQueryEngine/findByAddress-pointer:", result);
				doh.assertTrue(result.length == 1, "Expected length after query = 1");
				testResult.callback(result);
			});
			return testResult;
		},
		"query with inline fn" : function() {
			var testResult = new doh.Deferred();
			when(store.query(findDownloadBean), function(result) {
				console.log(">GenericQueryEngine/findDownloadBean-inline:", result);
				doh.assertTrue(result.length == 1, "Expected length after query = 1");
				testResult.callback(result);
			});
			return testResult;
			function findDownloadBean(data) {
				// call in operators scope, so we can use operator's helper methods, see [1]
				return this._filterByProperty(data, "download");
			}
		},
		"query with sort (asc)" : function() {
			var testResult = new doh.Deferred();
			when(store.query("find by beans without methods", {
				sort : [
					{
						attribute : "bean"
					}
				]
			}), function(result) {
				console.log(">GenericQueryEngine/query with sort (asc):", result);
				doh.assertTrue(result.length == 2, "Expected length after query = 2");
				doh.assertTrue(result[0].bean === "agreementitem" && result[1].bean === "download", "Bad order after sorting");
				testResult.callback(result);
			});
			return testResult;
		},
		"query with sort (desc)" : function() {
			var testResult = new doh.Deferred();
			when(store.query("find by beans without methods", {
				sort : [
					{
						attribute : "bean",
						descending : true
					}
				]
			}), function(result) {
				console.log(">GenericQueryEngine/query with sort (desc):", result);
				doh.assertTrue(result.length == 2, "Expected length after query = 2");
				doh.assertTrue(result[0].bean === "download" && result[1].bean === "agreementitem", "Bad order after sorting");
				testResult.callback(result);
			});
			return testResult;
		},
		"query with sort (as function)" : function() {
			var testResult = new doh.Deferred();
			when(store.query("find by beans without methods", {
				sort : sortByBeanNameLength
			// or you can use gjax/collections/compare.js functions
			}), function(result) {
				console.log(">GenericQueryEngine/query with sort (desc):", result);
				doh.assertTrue(result.length == 2, "Expected length after query = 2");
				doh.assertTrue(result[0].bean === "agreementitem" && result[1].bean === "download", "Bad order after sorting");
				testResult.callback(result);
			});
			return testResult;
			// inspirated by dojo/store/util/SimpleQueryEngine default sorting function
			function sortByBeanNameLength(a, b) {
				var aRevName = a.bean;
				var bRevName = b.bean;
				// TODO check if not null
				if (aRevName.length != bRevName.length) {
					return aRevName.length > bRevName.length ? -1 : 1;
				}
				return 0; // same length
			}
		},
		"query with complex sort" : function() {
			//TODO sort by more attrs
		},
		"empty query with limit" : function() {
			var testResult = new doh.Deferred();
			when(store.query("", {
				start : 1,
				count : 3
			}), function(result) { // TODO see [2]
				console.log(">GenericQueryEngine/query with limit:", result);
				doh.assertTrue(result.length == 3, "Expected length after limit = 3");
				doh.assertTrue(result[0].bean === "acquaitance", "Expected start at 'acquaitance' bean");
				testResult.callback(result);
			});
			return testResult;
		},
		"query with limit" : function() {
			// TODO query with limit together
		}
	//TODO add other tests
	};
	// --------------------------------------
	doh.register("gjax/store/GenericQueryEngine", genericQueryEngineWithLazyMemory);
});