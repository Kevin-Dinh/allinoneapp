/**
 * created 07/24/2015
 * 
 * @author jukrop
 * @see http://livedocs.dojotoolkit.org/util/doh
 * @description TODO: fill in description
 * 
 * @generated by TemplateWizard, v.2015/01/08 //do not remove this comment please
 */
define([
	"doh",
	"dojo/has",
	//tested libraries
	"gjax/store/Memory",
	"dojo/_base/lang"
], function(doh, has, Memory, lang) {

	// ---------------------------- test object ------------------
	// private functions

	function createStore(data) {
		var sampleData = data || [
			{
				name : "Ian",
				partId : 10
			},
			{
				name : "Jack",
				partId : 20
			}
		];

		return new Memory({
			data : data || sampleData,
			idProperty : "partId"
		});
	}

	// test object
	var testStdApi = {
		"add" : function() {
			var store = createStore();
			// standard add
			var id = store.add({
				name : "Joe"
			});
			var item = store.get(id);
			doh.is("Joe", item.name);
			doh.is("number", typeof item.partId);
			doh.is(item.partId, store.getIdentity(item));
			doh.is(item.partId, id);
		},
		"add_explicit_id" : function() {
			var store = createStore();
			// standard add with explicit id
			var id = store.add({
				name : "Joe"
			}, {
				id : 123456
			});
			doh.is(123456, id);
			var item = store.get(id);
			doh.is(123456, store.getIdentity(item));
			doh.is(123456, item.partId);
		},
		"put" : function() {
			var store = createStore();

			var item = lang.clone(store.get(20));
			item.name = "Mr. Jack";

			var id = store.put(item);
			doh.is("Mr. Jack", store.get(id).name);
		},
		"put_partial" : function() {
			var store = createStore();

			var origItem = store.get(20);

			var id = store.put({
				partId : origItem.partId,
				status : "on the run"
			});
			var updatedItem = store.get(id);
			doh.is("Jack", updatedItem.name, "Update should not remove original properties");
			doh.is("on the run", updatedItem.status);
		}
	};
	var testObjApi = {
		"add" : function() {
			var store = createStore();
			store.returnObjectOnAddPut = true;

			var item = store.add({
				name : "Joe"
			});
			doh.is("Joe", item.name);
			doh.is("number", typeof item.partId);
			doh.is(store.getIdentity(item), item.partId);
			doh.is(item, store.get(item.partId));
		},
		"add_explicit_id" : function() {
			var store = createStore();
			store.returnObjectOnAddPut = true;

			// standard add
			var item = store.add({
				name : "Joe"
			}, {
				id : 123456
			});
			doh.is(123456, store.getIdentity(item));
			doh.is(123456, item.partId);
		},
		"put" : function() {
			var store = createStore();
			store.returnObjectOnAddPut = true;

			var item = lang.clone(store.get(20));
			item.name = "Mr. Jack";

			var updatedItem = store.put(item);
			doh.is("Mr. Jack", updatedItem.name);
		},
		"put_partial" : function() {
			var store = createStore();
			store.returnObjectOnAddPut = true;

			var origItem = store.get(20);

			var updatedItem = store.put({
				partId : origItem.partId,
				status : "on the run"
			});
			doh.is("Jack", updatedItem.name, "Update should not remove original properties");
			doh.is("on the run", updatedItem.status);
		}
	};
	var testErrors = {
		"add_existing_id" : function() {
			var store = createStore();
			// try to add already existing id
			try {
				store.add({
					name : "Karl"
				}, {
					id : 10
				});
				doh.f(true, "Cannot insert item with id that already exists!");
			} catch (e) {
				doh.is("Object already exists with id 10", e.message);
			}
		},
		"put_nonexisting_id" : function() {
			var store = createStore();
			// try to update nonexistent id
			var id = store.put({
				name : "Karl",
				partId : 555
			});
			doh.is(555, id);
			var id2 = store.put({
				name : "Karl"
			}, {
				id : 555
			});
			doh.is(555, id2);
		},
		"put_nonexisting_id_strict" : function() {
			var store = createStore();
			store.strictPut = true;
			// try to update nonexistent id
			try {
				store.put({
					name : "Karl",
					partId : 555
				});
				doh.f(true, "Cannot update item with nonexistent id!");
			} catch (e) {
				doh.is("Object does not exist with id 555", e.message);
			}
			try {
				store.put({
					name : "Karl"
				}, {
					id : 555
				});
				doh.f(true, "Cannot update item with nonexistent id!");
			} catch (e) {
				doh.is("Object does not exist with id 555", e.message);
			}
		},
		"put_no_id" : function() {
			var store = createStore();
			// try to put item with no id
			store.put({
				name : "Karl"
			});
			// no errors
		},
		"put_no_id_strict" : function() {
			var store = createStore();
			store.strictPut = true;
			// try to put item with no id
			try {
				store.put({
					name : "Karl"
				});
				doh.f(true, "Cannot update item with no id id cannot be added again!");
			} catch (e) {
				doh.is("Cannot call put without identity", e.message);
			}
		}
	};
	doh.register("gjax/store/Memory-standardAPI", testStdApi);
	doh.register("gjax/store/Memory-objectReturningAPI", testObjApi);
	doh.register("gjax/store/Memory-errors", testErrors);

	// runnable with: node (dnode)
	has("host-browser") || doh.run();
});
