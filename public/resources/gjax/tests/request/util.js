/**
 * created 07/24/2013
 * 
 * @author arakovsky
 * @see http://livedocs.dojotoolkit.org/util/doh
 * @description unit test for module "gjax/request/util"
 * 
 * @generated by TemplateWizard, v.2013/01/03 //do not remove this comment please
 */
define([
	"doh",
	"gjax/async/timeout",
	"dojo/Deferred",
	"dojo/_base/lang",
	"gjax/error",
	"gjax/XString",
	"dojox/lang/functional",
	"dojo/json",
	"gjax/testing/request/reflectRequest",
	"gjax/request/jsonXhr",
	//TESTED LIB:
	"gjax/request/util",
	"dojox/lang/functional/fold"
], function(doh, timeout, Deferred, lang, error, stringUtils, df, json, reflectRequest, jsonXhr, util) {

	var SVC = "/foo";

	function UNEXPECTED_SUCCESS() {
		throw new Error("Succes unexpected.");
	}

	var testObject = {
		"Mixin promise" : function() {
			var promise = (new Deferred()).then();
			promise.foo = "bar";
			doh.assertFalse("foo" in promise, "Foo SHOULD NOT be present in frozen promise object");

			promise = util.mixinPromise(promise, {
				foo : "bar"
			});
			doh.assertTrue(promise.foo == "bar", "Foo MUST be present in frozen promise object");
		},
		"doBefore - sync" : function() {
			var req = util.wrap(reflectRequest, function(requestArgs) {
				requestArgs.options.headers = {
					"X-Test" : "foo"
				};
				return requestArgs;
			});
			return req.get(SVC)//
			.then(function(data) {
				doh.is(data.headers["x-test"], "foo");
			});
		},
		"doBefore - sync - error" : function() {
			var req = util.wrap(reflectRequest, function() {
				throw error.newError(new Error(), "foo");
			});
			return req.get(SVC)//
			.then(UNEXPECTED_SUCCESS, function(err) {
				doh.is("foo", err.message, "Unexpected error message");
			});
		},
		"doBefore - async" : function() {
			var req = util.wrap(reflectRequest, function(requestArgs) {
				var dfd = new Deferred();
				requestArgs.options.headers = {
					"X-Test" : "foo"
				};
				setTimeout(function() {
					dfd.resolve(requestArgs);
				}, 1);
				return dfd;
			});
			return req.get(SVC)//
			.then(function(data) {
				doh.is("foo", data.headers["x-test"], "Unexpected headers");
			});
		},
		"doBefore - async - error" : function() {
			var req = util.wrap(reflectRequest, function() {
				var dfd = new Deferred();
				dfd.reject(error.newError(new Error(), "foo"));
				return dfd;
			});
			return req.get(SVC)//
			.then(UNEXPECTED_SUCCESS, function(err) {
				doh.is("foo", err.message, "Unexpected error message");
			});
		},
		"doBefore - changeUrl" : function() {
			var req = util.wrap(reflectRequest, function(requestArgs) {
				requestArgs.url += "?foo=bar";
				return requestArgs;
			});
			return req.get(SVC)//
			.then(function(data) {
				doh.t(stringUtils.endsWith(data.url, "?foo=bar"), "Unexpected url");
			});
		},
		"doAfterCallback" : function() {
			var req = util.wrap(reflectRequest, null, function(data) {
				data.foo = "bar";
				return data;
			});
			return req.get(SVC)//
			.then(function(data) {
				doh.is("bar", data.foo, "Unexpected data");
			});
		},
		"doAfterCallback - error" : function() {
			var req = util.wrap(reflectRequest, null, function() {
				throw error.newError(new Error(), "foo");

			});
			return req.get(SVC)//
			.then(UNEXPECTED_SUCCESS, function(err) {
				doh.is("foo", err.message, "Unexpected error message");
			});
		},
		"doAfterErrback" : function() {
			//here wrap real json xhr, so we get real error
			var req = util.wrap(jsonXhr, null, null, function(/*err*/) {
				var data = {
					foo : "bar"
				};
				return data;
			});
			return req.get("/foo")//
			.then(function(data) {
				doh.is("bar", data.foo, "Unexpected data");
			});
		},
		"doAfterErrback - error" : function() {
			var req = util.wrap(jsonXhr, null, null, function(/*err*/) {
				throw error.newError(new Error(), "foo");

			});
			return req.get("/foo")//
			.then(UNEXPECTED_SUCCESS, function(err) {
				doh.is("foo", err.message, "Unexpected error message");
			});
		},
		"no AfterCallback & pass" : function() {
			var req = util.wrap(reflectRequest, null, null, function(/*err*/) {
				var data = {
					foo : "bar"
				};
				return data;
			});
			return req.get(SVC)//
			.then(function(data) { //we should end up in succes
				//function defined in wrap is errBack, and should not be called
				doh.isNot("bar", data.foo, "Unexpected data");
			});
		},
		"resolve responsePromise in doBefore" : function() {
			var req = util.wrap(reflectRequest, function(requestArgs, returningResponsePromise) {
				returningResponsePromise.resolve({
					foo : "bar"
				});
			});
			var dataPromise = req.get(SVC);
			return dataPromise.response.then(function(response) {
				doh.is("bar", response.foo, "Unexpected response");
			});
		},
		"resolve responsePromise in doAfterCallback" : function() {
			var req = util.wrap(reflectRequest, null, function(data, response, returningResponsePromise) {
				returningResponsePromise.resolve({
					foo : "bar"
				});
			});
			var dataPromise = req.get(SVC);
			return dataPromise.response.then(function(response) {
				doh.is("bar", response.foo, "Unexpected response");
			});
		},
		"resolve responsePromise in doAfterErrback" : function() {
			var req = util.wrap(jsonXhr, null, null, function(err, returningResponsePromise) {
				returningResponsePromise.resolve({
					foo : "bar"
				});
				return {};
			});
			var dataPromise = req.get("/foo");
			return dataPromise.response.then(function(response) {
				doh.is("bar", response.foo, "Unexpected response");
			});
		}
	};

	doh.register("gjax/request/util", testObject);
});
