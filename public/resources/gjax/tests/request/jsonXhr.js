/**
 * created 10/04/2012
 * 
 * @author arakovsky
 * @see http://livedocs.dojotoolkit.org/util/doh
 * @description unit test for module "gjax/request/jsonXhr"
 * 
 * @generated by TemplateWizard, v.2012/10/01 //do not remove this comment please
 */
define([
	"require",
	"dojo",
	"doh",
	"gjax/uri/Uri",
	"dojo/_base/array",
	"dojo/promise/all",
	"dojox/lang/functional",
	"gjax/request/jsonXhr"
], function(require, dojo, doh, Uri, array, all, df, jsonXhr) {

	function UNEXPECTED_SUCCESS() {
		throw new Error("Succes unexpected.");
	}

	var FAILING_URL = "/foo";//not existing we will endup in errorback

	// test object
	var testObject = {
		"Correct headers are sent" : function() {
			return jsonXhr.get(FAILING_URL)//
			.then(UNEXPECTED_SUCCESS, function(err) {
				doh.is("application/json", err.response.options.headers["Content-Type"]);
				doh.is("application/json", err.response.options.headers["Accept"]);
			});
		},

		"Errors are propagated correctly" : function() {
			return jsonXhr.get(FAILING_URL)//
			.then(UNEXPECTED_SUCCESS, function(err) {
				doh.is(404, err.response.status, "Unexpected response status");
			});
		},

		"Timeout works correctly (fails in very fast servers)" : function() {
			//this test will fail if server is very fast
			//dojo checks timeouted requests in 50ms intervals
			return jsonXhr.get(FAILING_URL, {
				timeout : 1
			})//
			.then(UNEXPECTED_SUCCESS, function(e) {
				doh.t(e.name.indexOf("RequestTimeout") > -1, "Unexpected error: " + e.name);
			});
		},

		"Data is correclty laoded & parsed" : function() {
			var uri = Uri.resolve(null, require.toUrl("./_mockData/b.json"));
			return jsonXhr.get(uri)//
			.then(function(data) {
				doh.is("B", data.name);
			});
		},

		"Query is correctly build" : function() {
			return jsonXhr.get(FAILING_URL, {
				query : {
					foo : "bar"
				}
			})//
			.then(UNEXPECTED_SUCCESS, function(err) {
				//we are loading not real url, so it will fail, but we can check builded url
				doh.t(err.response.url.indexOf("?foo=bar") > 0, "Unexpected url: " + err.response.url);
			});
		},

		"Payload is correctly build" : function() {
			return jsonXhr.get(FAILING_URL, {
				data : {
					foo : "bar"
				}
			})//
			.then(UNEXPECTED_SUCCESS, function(err) {
				//we are loading not real url, so it will fail, but we can check builded response
				doh.is('{"foo":"bar"}', err.response.options.data);
			});
		},

		"HTTP methods are correctly sent" : function() {
			return all({
				GET : jsonXhr.get(FAILING_URL).otherwise(errToMethod),
				PUT : jsonXhr.put(FAILING_URL).otherwise(errToMethod),
				POST : jsonXhr.post(FAILING_URL).otherwise(errToMethod),
				DELETE : jsonXhr.del(FAILING_URL).otherwise(errToMethod)
			})//
			.then(function(result) {
				df.forIn(result, doh.is); //each methdo should match
			});

			function errToMethod(err) {
				return err.response.options.method;
			}
		},

		"json response with invalid syntax" : function() {
			var uri = Uri.resolve(null, require.toUrl("./_mockData/syntax-error.json"));
			return jsonXhr(uri, {
				passToXhr : true
			})//
			.then(UNEXPECTED_SUCCESS, function(err) {
				doh.assertTrue((err.name === "SyntaxError"), "SyntaxError from JSON parser expected");
				// WARNING: if http error is turned on (by requiring app/common/error/_httpHandler),
				// localized message "errUnexpectedError" will be added (name will be still syntax error)
			});
		}
	};

	doh.register("gjax/request/jsonXhr", testObject);

});
