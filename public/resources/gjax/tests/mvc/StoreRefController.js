/**
 * created 07/23/2013
 * 
 * @author arakovsky, mbeliansky
 * @see http://livedocs.dojotoolkit.org/util/doh
 * @description unit test for module "gjax/mvc/StoreRefController"
 * 
 * @generated by TemplateWizard, v.2013/01/03 //do not remove this comment please
 */
define([
	"doh",
	"gjax/request/util",
	"dojo/Deferred",
	"dojo/request/registry",
	"dojo/store/Memory",
	"dojo/promise/Promise",
	//tested
	"gjax/mvc/StoreRefController"
], function(doh, util, Deferred, request, Memory, Promise, StoreRefController) {

	var cntr = new StoreRefController({}), //
	testObject = {
		"Initial state" : function() {
			doh.t(cntr.model === null); // initial state of controller
		},

		"Load model from data" : function() {
			// various data can be loaded to model
			_test({
				a : 1
			});
			_test([
				{
					a : 1
				},
				{
					a : 2
				}
			]);

			function _test(o) {
				cntr.loadModelFromData(o);
				var plainValue = cntr.getPlainValue();
				doh.is(toString(o), toString(plainValue));
				doh.f(plainValue === o); // object is cloned
				doh.f(cntr.model === o);
			}
		},

		"Get changed properties on model" : function() {
			// load empty model
			cntr.loadModelFromData({});
			doh.t(emptyObj(cntr.getChangedValue()));

			var value;

			// should be changed now
			cntr.set("a", 1);
			value = _isEmpty(cntr, false);
			doh.t("a" in value);
			doh.is(value.a, 1);
			doh.is(cntr._changedProps.length, 1);
			doh.is(cntr._changedProps[0], "a");

			cntr.commit();
			_isEmpty(cntr, true);

			// load non empty model, should be changed now
			cntr.loadModelFromData({
				b : 2
			});
			value = _isEmpty(cntr, false);

			cntr.commit();
			_isEmpty(cntr, true);

			function _isEmpty(c, expecting) {
				var v = c.getChangedValue();
				doh.is(expecting, emptyObj(v), "Changed values should " + (expecting ? "" : "not ") + "be empty.");
				return v;
			}
		}
	};

	doh.register("StoreRefController-Object", testObject);

	// TODO: test with async store
	// TODO: other tests addStore/putStore

	var sampleData = [
		{
			"id" : 0,
			"addressLine" : "add0",
			"create" : "2010-01-01",
			"name" : "name0"
		},
		{
			"id" : 1,
			"addressLine" : "add1",
			"create" : "2011-01-01",
			"name" : "name1"
		},
		{
			"id" : 2,
			"addressLine" : "add2",
			"create" : "2012-01-01",
			"name" : "name2"
		}
	];

	var syncStore = new Memory({
		data : sampleData,
		idProperty : "id"
	});

	var syncCntr = new StoreRefController({
		store : syncStore,
		partialUpdate : false
	// since Memory cannot do partial update
	}), //
	storeTestObject = {
		"Initial state" : function() {
			// initial state of controller
			doh.t(syncCntr.store === syncStore);
			doh.t(syncCntr.model === null);
		},

		// -------------------------------------
		// queryStore is still sync
		"Query controller" : function() {
			var data = syncCntr.queryStore();

			doh.is("[object Array]", toString(data));
			doh.is(sampleData.length, data.length);
			doh.isNot(syncCntr.model, null); // model is loaded now
			doh.t(syncCntr.model === data); // query return whole data model

			var plainValue = syncCntr.getPlainValue(); // return actually loaded model
			doh.is("[object Array]", toString(plainValue));
			doh.f(plainValue === syncCntr.model); // but object is cloned

			data = syncCntr.queryStore({
				id : 2
			});
			doh.is(1, data.length);
			doh.t(syncCntr.model === data); // model is also changed (same as query result)
		},

		// -------------------------------------
		// getStore is async 
		"Get controller" : function() {
			var result = new doh.Deferred();
			// demonstrate how getStore work on model
			var dataReady = syncCntr.getStore(1);
			doh.t(dataReady instanceof Promise);
			dataReady.then(function(data) {
				doh.is("[object Object]", toString(data));
				doh.t(syncCntr.model !== null);
				doh.t(syncCntr.model === data); // model is loaded now
				var plainValue = syncCntr.getPlainValue(); // return actually loaded model
				doh.is("[object Object]", toString(plainValue));
				doh.f(plainValue === data);
				doh.f(plainValue === syncCntr.model); // but object is cloned
				result.resolve();
			}).otherwise(function(err) {
				result.reject(err);
			});
			return result;
		},

		"Get identity of loaded model" : function() {
			var id = 2;
			var expectedId = 2;
			var result = new doh.Deferred();

			syncCntr.getStore(id).then(function() {
				var data = syncCntr.getPlainValue();
				doh.is("[object Object]", toString(data));
				var id = syncCntr.getModelIdentity(); // after model loaded, get identity on store
				doh.is("[object Number]", toString(id)); // getIdentity is sync
				doh.is(expectedId, id);
				doh.is(expectedId, data.id);
				result.resolve();
			}).otherwise(function(err) {
				result.reject(err);
			});
			return result;
		},

		"Get 0 identity of loaded model" : function() {
			var id = 0;
			var expectedId = 0;
			var result = new doh.Deferred();

			syncCntr.getStore(id).then(function() {
				var data = syncCntr.getPlainValue();
				doh.is("[object Object]", toString(data));
				var id = syncCntr.getModelIdentity(); // after model loaded, get identity on store
				doh.is("[object Number]", toString(id)); // getIdentity is sync
				doh.is(expectedId, id);
				doh.is(expectedId, data.id);
				result.resolve();
			}).otherwise(function(err) {
				result.reject(err);
			});
			return result;
		},

		"Insert model" : function() {
			var result = new doh.Deferred();

			syncCntr.loadModelFromData({
				addressLine : "XYZ"
			});
			syncCntr.set("name", "babar");

			var dataReady = syncCntr.commitModel();
			doh.t(dataReady instanceof Promise);

			dataReady.then(function(id /*only Memory returns id from add/put*/) {
				doh.is("[object Number]", toString(id)); // random id generated by Memory
				return syncCntr.getStore(id);
			}).then(function() {
				var data = syncCntr.getPlainValue();
				doh.is("[object Object]", toString(data));
				var id = syncCntr.getModelIdentity();
				doh.is({
//						"_identity": id, // Memory does not add this
					"id" : id,
					"addressLine" : "XYZ",
					"name" : "babar"
				}, data);
				result.resolve();
			}).otherwise(function(err) {
				result.reject(err);
			});
			return result;
		},

		// not good idea to test update with Memory - is has no concept of partial update, etc ...
		"Update model" : function() {
			var result = new doh.Deferred();
			var id = 0;
			var expectedId = 0;

			syncCntr.getStore(id).then(function() {
				// model is loaded, let's change it
				syncCntr.set("name", "babar");
				return syncCntr.commitModel();
			}).then(function(id /*only Memory returns id from add/put*/) {
				doh.is("[object Number]", toString(id));
				doh.is(expectedId, id);
				return syncCntr.getStore(id);
			}).then(function() {
				var data = syncCntr.getPlainValue();
				doh.is("[object Object]", toString(data));
				doh.is({
					"_identity" : expectedId,
					"id" : expectedId,
					"addressLine" : "add0",
					"create" : "2010-01-01",
					"name" : "babar"
				}, data);
				result.resolve();
			}).otherwise(function(err) {
				result.reject(err);
			});

			return result;
		}
	};

	doh.register("StoreRefController-store", storeTestObject);

	var clientCallIdTestObject = {
		"Test ClientCallId after resubmit" : function() {
			var testResult = new doh.Deferred(/*canceller*/);

			var firstClientCallId;
			var store = {
				add : function(obj, options) {
					var deferred = new Deferred();

					if (firstClientCallId) {
						if (firstClientCallId == options.clientCallId) {
							testResult.resolve();
						} else {
							testResult.reject("unexpected client call id, 1st '" + firstClientCallId + "', 2nd '" + options.clientCallId + "'");
						}
					}
					firstClientCallId = options.clientCallId;
					deferred.reject(); //reject dfd - commit will not be called in Controller
					return deferred;
				},
				getIdentity : function() {
					return null;
				}
			};

			var controller = new StoreRefController({
				store : store
			});
			controller.loadModelFromData({
				a : 1,
				b : 2
			});

			controller.commitModel().always(function() {
				controller.commitModel();//recomit - same client call id should be used
			});

			return testResult;
		},
		"Test ClientCallId after change & resubmit" : function() {
			var testResult = new doh.Deferred(/*canceller*/);

			var firstClientCallId;
			var store = {
				add : function(obj, options) {
					var deferred = new Deferred();

					if (firstClientCallId) {
						if (firstClientCallId != options.clientCallId) {
							testResult.resolve();
						} else {
							testResult.reject("unexpected client call id, 1st '" + firstClientCallId + "', 2nd '" + options.clientCallId + "'");
						}
					}
					firstClientCallId = options.clientCallId;
					deferred.reject(); //reject dfd - commit will not be called in Controller
					return deferred;
				},
				getIdentity : function() {
					return null;
				}
			};

			var controller = new StoreRefController({
				store : store
			});
			controller.loadModelFromData({
				a : 1,
				b : 2
			});
			controller.commitModel().always(function() {
				controller.set("a", 2);
				controller.commitModel();//recomit - new client call id should be used
			});
			return testResult;
		},
		"Test updated client call id after succes" : function() {
			var testResult = new doh.Deferred(/*canceller*/);

			var store = {
				add : function() {
					return {
						_meta : {
							newClientCallId : "8888"
						}
					};
				},
				getIdentity : function() {
					return null;
				}
			};

			var controller = new StoreRefController({
				store : store
			});
			controller.loadModelFromData({
				a : 1,
				b : 2
			});
			controller.commitModel().then(function() {
				if (controller._lastClientCallId == "8888") {
					testResult.resolve();
				} else {
					testResult.reject("Unexpected _lastClientCallId " + controller._lastClientCallId);
				}
			});
			return testResult;
		},
		"Test updated client call id after error" : function() {
			var testResult = new doh.Deferred(/*canceller*/);

			var testRequest = util.wrap(request, null, null, function(err) {
				err.response.newClientCallId = "8888";
				throw err;
			});

			var firstClientCallId;
			var store = {
				add : function(obj, options) {

					if (firstClientCallId) {
						if (options.clientCallId == "8888") {
							testResult.resolve();
						} else {
							testResult.reject("unexpected 2nd client call id '" + options.clientCallId + "'");
						}
					}
					firstClientCallId = options.clientCallId;

					return testRequest("/foo");
				},
				getIdentity : function() {
					return null;
				}
			};

			var controller = new StoreRefController({
				store : store
			});
			controller.loadModelFromData({
				a : 1,
				b : 2
			});
			controller.commitModel().always(function() {
				controller.commitModel();//recomit - updated client call id should be used
			});

			return testResult;
		}
	};

	doh.register("StoreRefController-clientCallId", clientCallIdTestObject);

	// helpers methods
	function toString(o) {
		return Object.prototype.toString.call(o);
	}

	function emptyObj(o) {
		var i;
		for (i in o) {
			return false;
		}
		return true;
	}
});
