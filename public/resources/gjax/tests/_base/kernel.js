/**
 * created 12/13/2012
 * 
 * @author mbeliansky
 * @see http://livedocs.dojotoolkit.org/util/doh
 * @description unit test for module "gjax/_base/kernel"
 * 
 * @generated by TemplateWizard, v.2012/11/21 //do not remove this comment please
 */
define([
	"dojo",
	"doh",
	"dojo/has",
	"dojo/_base/array",
	"gjax/error",
	"dojo/when",
	"dojo/_base/lang",
	//tested libraries
	"gjax/_base/kernel"
], function(dojo, doh, has, array, error, when, lang, gkernel) {

	var testObject = {

		isDate_date : function() {
			array.map([
				new Date()
			], doTest);
			function doTest(d) {
				doh.t(gkernel.isDate(d));
			}
		},

		isDate_noDate : function() {
			array.map([
				new Date("xxx"), // invalid date is NOT considered date (since 2012/12/14) !       
				Date(), // Date() return string
				{}, // object is not a date, but date is an object
				"2012-01-01"
			], doTest);
			function doTest(d) {
				doh.f(gkernel.isDate(d));
			}
		},

		asrt_ok : function() {
			array.forEach([
				true,
				1,
				{},
				new Date(),
				"something",
				new Date("xxx")
			//be carefull !!! this is truthy value
			], function(condition) {
				gkernel.asrt(condition);
			});
		},

		asrt_expectedErrors : function() {
			array.forEach([
				false,
				"",
				NaN,
				0,
				null,
				undefined
			], function(condition) {
				try {
					gkernel.asrt(condition);
					doh.f(true, "unexpected success of assert for" + condition);
				} catch (ex) {
					doh.t(ex.name === "AssertionError", "unexpected ex:" + ex);
				}
			});
		},
		
		noop : function() {
			return testCallbackMethods(gkernel.noop, error.callbackNoop, "foo", undefined);
		},
		
		identity : function() {
			return testCallbackMethods(gkernel.identity, error.callbackPass, "foo", "foo");
		}

	};

	function testCallbackMethods(testedMethod, testedLegacyMethod, resolveValue, expectedResult) {
		return when(resolveValue)//
		.then(testedMethod)//TESTED METHOD
		.then(testedLegacyMethod)//test also this API which is redirected to gkernel from error
		.then(lang.hitch(doh, "is", expectedResult));
	}

	doh.register("gjax/_base/kernel", testObject);

	// runnable with: node (dnode)
	has("host-browser") || doh.run();
});
