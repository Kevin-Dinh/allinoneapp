/**
 * created 10/05/2012
 * 
 * @author marcus
 * @see http://livedocs.dojotoolkit.org/util/doh
 * @description unit test for module "gjax/_base/object"
 * 
 * @generated by TemplateWizard, v.2012/10/01 //do not remove this comment please
 */
define([
	"dojo",
	"doh",
	//tested libraries
	"gjax/_base/object",
	"dojox/lang/functional"

], function(dojo, doh, gobject, df) {

	// ---------------------------- test object ------------------
	// private functions

	// test object, only bugs
	// refister other things under separate test (in this file)
	var knownBugs = {
		filter_indexOfDojoBug : function() { // http://bugs.dojotoolkit.org/ticket/16104
			var o = {
				FALSE : false,
				ZERO : 0
			};
			gobject.filter(o, [
				""
			]);
			doh.t("ZERO" in o && o.ZERO === 0, "Zero was accidentaly removed with array.indexOf");
			doh.t("FALSE" in o && o.FALSE === false, "FALSE was accidentaly removed with array.indexOf");
		}
	//TODO: add another methods
	};

	var filterTest = {

		filter_null : function() {
			var o = {
				NULL : null
			};
			gobject.filter(o, [
				null
			]);
			doh.t(!("NULL" in o), "Null was not removed.");
		},

		filter_undefined : function() {
			var o = {
				UNDEFINED : undefined
			};
			gobject.filter(o, [
				undefined
			]);
			doh.t(!("UNDEFINED" in o), "Undefined was not removed.");
		},

		filter_emptyString : function() {
			var o = {
				EMPTY : ""
			};
			gobject.filter(o, [
				""
			]);
			doh.t(!("EMPTY" in o), "Empty string was not removed.");
		},

		filter_emptyObject : function() {
			// date is also object, but should not be removed
			var o = {
				EMPTYOBJ : {},
				DATE : new Date(2012, 1, 1)
			};
			gobject.filter(o, [
				{}
			]);
			doh.t(!("EMPTYOBJ" in o), "Empty object was not removed.");
			doh.t("DATE" in o, "Date object was removed.");
		},

		filter_emptyArray : function() {
			var o = {
				EMPTYARRAY : []
			};
			gobject.filter(o, [
				[]
			]);
			doh.t(!("EMPTYARRAY" in o), "Empty array was not removed.");
		},

		filter_nan : function() {
			var o = {
				NAN : NaN
			};
			gobject.filter(o, [
				NaN
			]);
			doh.t(!("NAN" in o), "NaN was not removed.");
		},

		filter_values : function() {
			var o = {
				INT : 6,
				DECIMAL : 5.5,
				ZERO : 0,
				STRING : "fooString",
				NULL : null,
				innerFoo : {
					INT : 6,
					DECIMAL : 5.5,
					ZERO : 0,
					STRING : "fooString",
					UNDEFINED : undefined
				}
			};
			gobject.filter(o, [
				6,
				5.5,
				0,
				"fooString"
			]);
			doTest(o);
			doTest(o.innerFoo);
			function doTest(o) {
				doh.t(!("INT" in o), "Number 6 was not removed.");
				doh.t(!("DECIMAL" in o), "Number 5.5 was not removed.");
				doh.t(!("ZERO" in o), "Zero was not removed.");
				doh.t(!("STRING" in o), "'fooString' string was not removed.");
			}
		},

		filter_default : function() {
			var o = {
				EMPTY : "",
				EMPTYOBJ : {},
				NULL : null,
				UNDEFINED : undefined,
				NAN : NaN,
				FALSE : false,
				TRUE : true
			};
			gobject.filter(o);
			// default values ("", null, undefined, NaN, {})
			doh.t(!("EMPTY" in o), "Empty string was not removed.");
			doh.t(!("EMPTYOBJ" in o), "Empty object was not removed.");
			doh.t(!("NULL" in o), "Null was not removed.");
			doh.t(!("UNDEFINED" in o), "Undefined was not removed.");
			doh.t(!("NAN" in o), "NaN was not removed.");
			doh.t("FALSE" in o, "FALSE was removed.");
			doh.t("TRUE" in o, "TRUE was removed.");
		},

		filter_allInnerObject : function() {
			var o = {
				foo1 : 111,
				foo2 : "fooString",
				DATE : new Date(2012, 1, 1),
				EMPTY : "",
				EMPTYOBJ : {},
				EMPTYARRAY : [],
				NULL : null,
				UNDEFINED : undefined,
				NAN : NaN,
				foo3 : {
					foo1 : 333,
					foo2 : "foo3String",
					DATE : new Date(2012, 1, 1),
					EMPTY : "",
					EMPTYOBJ : {},
					EMPTYARRAY : [],
					NULL : null,
					UNDEFINED : undefined,
					NAN : NaN,
					foo3Inner : {
						foo1 : 3331,
						foo2 : "foo3InnerString",
						DATE : new Date(2012, 1, 1),
						EMPTY : "",
						EMPTYOBJ : {},
						EMPTYARRAY : [],
						NULL : null,
						UNDEFINED : undefined,
						NAN : NaN
					}
				}
			};
			gobject.filter(o, [
				"",
				null,
				undefined,
				NaN,
				{},
				[]
			]);

			// check all properties in object
			doTest(o);
			doh.t("foo3" in o, "Property foo3 was removed.");
			doTest(o.foo3);
			doh.t("foo3Inner" in o.foo3, "Property foo3.foo3Inner was removed.");
			doTest(o.foo3.foo3Inner);
			function doTest(v) {
				doh.t(!("EMPTY" in v), "Empty string was not removed.");
				doh.t(!("EMPTYOBJ" in v), "Empty object was not removed.");
				doh.t(!("EMPTYARRAY" in v), "Empty array was not removed.");
				doh.t(!("UNDEFINED" in v), "Undefined was not removed.");
				doh.t(!("NULL" in v), "Null was not removed.");
				doh.t(!("NAN" in v), "NaN was not removed.");
				doh.t("DATE" in v, "Date was removed.");
				doh.t("foo1" in v, "foo1 was removed.");
				doh.t("foo2" in v, "foo2 was removed.");
			}
		},

		filter_all : function() {
			var o = {
				EMPTY : "",
				EMPTYOBJ : {},
				EMPTYARRAY : [],
				NULL : null,
				UNDEFINED : undefined,
				NAN : NaN,
				FALSE : false,
				TRUE : true,
				foo : {
					EMPTY : "",
					EMPTYOBJ : {},
					EMPTYARRAY : [],
					NULL : null,
					UNDEFINED : undefined,
					NAN : NaN,
					FALSE : false,
					TRUE : true
				}
			};
			gobject.filter(o, [
				"",
				null,
				undefined,
				NaN,
				{},
				[],
				false,
				true
			]);
			// must be empty object now
			doh.t(gobject.isEmpty(o), "Object is not empty.");
		}
	};

	var filterTypeOfTest = {
		filterTypeOf_default : function() {
			var orig = {
				s : "str",
				n : 10
			};
			var modified = gobject.filterTypeOf(orig); //this does not make much sense
			doh.t(modified === orig, "Method is destructive, returns original object");

			doh.t(orig.s === "str", "String prop. shall stay");
			doh.is(orig, modified, "Unmodified props expected");
		},

		filterTypeOf_number : function() {
			var orig = {
				s1 : "s1",
				s2 : "s2",
				n1 : 10,
				n2 : 20
			};
			//debugger;
			var modified = gobject.filterTypeOf(orig, [
				"number" //remove all number properties
			]); //this does not make much sense

			doh.t(modified === orig, "Method is destructive, returns original object");

			doh.f("n1" in orig, "Number prop. shall be removed");
			doh.f("n2" in orig, "Number prop. shall be removed");
			doh.t(orig.s1 === "s1" && orig.s2 === "s2", "String props shall be kept");
		},

		filterTypeOf_number_string : function() {
			var orig = {
				s1 : "s1",
				s2 : "s2",
				n1 : 10,
				n2 : 20
			};
			var modified = gobject.filterTypeOf(orig, [
				"number", //remove all number properties
				"string"
			]); //this does not make much sense

			doh.t(modified === orig, "Method is destructive, returns original object");

			doh.f("n1" in orig, "Number prop. shall be removed");
			doh.f("n2" in orig, "Number prop. shall be removed");
			doh.f("s1" in orig, "String prop. shall be removed");
			doh.f("s2" in orig, "String prop. shall be removed");
		},

		filterTypeOf_date : function() {
			var orig = {
				d1 : new Date(2012, 1, 1),
				d2 : new Date(2013, 1, 1)
			};
			var modified = gobject.filterTypeOf(orig, [
				"date" //remove all date properties				
			]);

			doh.t(modified === orig, "Method is destructive, returns original object");

			doh.f("d1" in orig, "Date prop. shall be removed");
			doh.f("d2" in orig, "Date prop. shall be removed");
		},

		filterTypeOf_number_string_date : function() {
			var orig = {
				s1 : "s1",
				s2 : "s2",
				n1 : 10,
				n2 : 20,
				d1 : new Date(2012, 1, 1),
				d2 : new Date(2013, 1, 1)
			};
			var modified = gobject.filterTypeOf(orig, [
				"number",
				"string",
				"date"
			]);

			doh.t(modified === orig, "Method is destructive, returns original object");

			doh.f("n1" in orig, "Number prop. shall be removed");
			doh.f("n2" in orig, "Number prop. shall be removed");
			doh.f("s1" in orig, "String prop. shall be removed");
			doh.f("s2" in orig, "String prop. shall be removed");
			doh.f("d1" in orig, "Date prop. shall be removed");
			doh.f("d2" in orig, "Date prop. shall be removed");
		}
//		filterTypeOf_object : function() {
//		},
//		filterTypeOf_function : function() {
//		},
//		filterTypeOf_boolean : function() {
//		},
//		filterTypeOf_array : function() {
//		},
//		filterTypeOf_undefined : function() {
//		},
//		filterTypeOf_null : function() {
//		}
	};

	var isEmptyTest = {
		isEmpty_emptyObject : function() {
			var o = {};
			doh.f(!gobject.isEmpty(o), "Object is not empty.");
		},

		isEmpty_object : function() {
			var o = {
				foo1 : 1,
				foo2 : ""
			};
			doh.f(gobject.isEmpty(o), "Object is empty.");
		}
	};

	var isEmptyValueTest = {
		isEmptyValue_object : function() {
			doh.f(gobject.isEmptyValue({}), "Empty object is empty.");
		},

		isEmptyValue_string : function() {
			doh.f(gobject.isEmptyValue("fooString"), "String is empty.");
		},

		isEmptyValue_emptyString : function() {
			doh.f(!gobject.isEmptyValue(""), "Empty string is not empty.");
		},

		isEmptyValue_null : function() {
			doh.f(!gobject.isEmptyValue(null), "Null is not empty.");
		},

		isEmptyValue_undefined : function() {
			doh.f(!gobject.isEmptyValue(undefined), "Undefined is not empty.");
		},

		isEmptyValue_NaN : function() {
			doh.f(!gobject.isEmptyValue(NaN), "NaN is not empty.");
		}
	};

	var callTest = {
		call_trim : function() {
			var fooArray = [
				2,
				" foo ",
				"foo2  ",
				"",
				null
			];
			var result = gobject.call(fooArray, "trim");
			doh.is(fooArray.length, result.length); // returned all values
		}
	};

	var remapTest = {
		"remap arrays" : function() {
			var source = {
				id : 1,
				name : "name1",
				date : "2012-01-01",
				addr : {
					zip : "12345",
					city : "Bratislava"
				}
			};

			var target = gobject.remap(source, [
				"id",
				"addr",
				"name",
				"xyz"
			], [
				"partId",
				"address",
				"firstName",
				"abc"
			]);
			doh.is(4, df.keys(target).length);
			// remapped
			doh.is(1, target.partId);
			doh.is("name1", target.firstName);
			doh.is({
				zip : "12345",
				city : "Bratislava"
			}, target.address);
			doh.f("id" in target || "name" in target || "addr" in target, "Remapped properties should not be present");
			// kept
			doh.is(target.date, "2012-01-01", "Not remapped properties should be present");
			// not present
			doh.f("xyz" in target || "abc" in target);
		},
		"remap strings" : function() {
			var source = {
				id : 1,
				name : "name1",
				date : "2012-01-01",
				addr : {
					zip : "12345",
					city : "Bratislava"
				}
			};

			var target = gobject.remap(source, "id,addr,name,xyz", "partId,address,firstName,abc");
			doh.is(4, df.keys(target).length);
			// remapped
			doh.is(1, target.partId);
			doh.is("name1", target.firstName);
			doh.is({
				zip : "12345",
				city : "Bratislava"
			}, target.address);
			doh.f("id" in target || "name" in target || "addr" in target, "Remapped properties should not be present");
			// kept
			doh.is(target.date, "2012-01-01", "Not remapped properties should be present");
			// not present
			doh.f("xyz" in target || "abc" in target);
		}
	};

	//TODO: add another methods and more variations if needed

	doh.register("gjax/_base/object-KnownBugs", knownBugs);
	doh.register("gjax/_base/object-IsEmpty", isEmptyTest);
	doh.register("gjax/_base/object-IsEmptyValue", isEmptyValueTest);
	doh.register("gjax/_base/object-FilterMethod", filterTest);
	doh.register("gjax/_base/object-FilterTypeOf", filterTypeOfTest);
	doh.register("gjax/_base/object-Call", callTest);
	doh.register("gjax/_base/object-Remap", remapTest);
});
