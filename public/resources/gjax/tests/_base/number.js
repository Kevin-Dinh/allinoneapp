/**
 * created 12/13/2012
 * 
 * @author mbeliansky
 * @see http://livedocs.dojotoolkit.org/util/doh
 * @description unit test for module "gjax/_base/kernel"
 * 
 * @generated by TemplateWizard, v.2012/11/21 //do not remove this comment please
 */
/*jshint -W053 */ //allow new Number(0)
define([
	"dojo",
	"doh",
	"dojo/has",
	"dojo/_base/array",
	//tested libraries
	"gjax/_base/number"
], function(dojo, doh, has, array, number) {

	// private methods

	function _testType(/*Number*/value) {
		// doh.is(5, "5") will return TRUE, so we will test expected type of computed value
		doh.is("number", typeof value);
		return value;
	}

	// test objects

	var testObject = {
		isNumber_numerical : function() {
			array.map([
				1,
				2.5,
				3.00,
				0xFFFF,
				Infinity, //also infinite numbers are numbers
				Math.pow(2, 53) + 2,
				new Number(0)
			//NOSONAR
			//MAX JS Long + 2
			], function doTest(v) {
				doh.t(number.isNumber(v));
			});

		},

		isNumber_nonNumerical : function() {
			array.map([
				"foo1",
				new Date(2012, 1, 1),
				NaN,
				null,
				false,
				"6513",
				"123.123"
			], function doTest(v) {
				doh.f(number.isNumber(v));
			});
		},

		"num() is the same as is number() but eliminates Infinity from allowed numbers" : function() {

			var n = 1;
			doh.is(n, number.num(n));

			n = Math.pow(2, 53) + 2;
			doh.is(n, number.num(n));

			//infinity is not allowed in num()
			n = Infinity;
			try {
				number.num(n);
				doh.t(false, "Unexpected Success");
			} catch (ex) {
				doh.t(true);
			}
		},

		"num() also normalizes Numbers to small number" : function() {
			var n = number.num(new Number(10)); //NOSONAR
			doh.t(typeof n === "number" && n === 10);

			n = number.num(new Number(0)); //NOSONAR
			doh.t(typeof n === "number" && n === 0);
		},

		"nvl() normalizes null and undefined to specified default" : function() {
			var n = 1;
			doh.is(n, number.nvl(null, n));
			doh.is(n, number.nvl(undefined, n));

			n = 0xFFFF;
			doh.is(n, number.nvl(null, n));
			doh.is(n, number.nvl(undefined, n));

			//NaN is also posible default value
			n = NaN;
			doh.is(n, number.nvl(null, n));
			doh.is(n, number.nvl(undefined, n));
		},

		"nvl() accepts only reasonable defaults" : function() {
			//strings, infnity numbers are not allowed in defaults 
			var n = "abc";
			try {
				number.nvl(null, n);
				number.nvl(undefined, n);
				doh.t(false, "Unexpected Success");
			} catch (e) {
				doh.t(true);
			}

			n = Infinity;
			try {
				number.nvl(null, n);
				number.nvl(undefined, n);
				doh.t(false, "Unexpected Success");
			} catch (e) {
				doh.t(true);
			}
		},

		"nanvl() normalizes 'non a numbers' (defined by num()) to supplied default" : function() {
			var d = "default value";

			var n = Infinity;
			doh.is(d, number.nanvl(n, d));

			n = "abc";
			doh.is(d, number.nanvl(n, d));

			n = false;
			doh.is(d, number.nanvl(n, d));
		},

		"nanvl() default can be anything" : function() {
			var n = "abc";
			doh.is(n, number.nanvl(false, n));

			n = false;
			doh.is(n, number.nanvl(false, n));

			n = Infinity;
			doh.is(n, number.nanvl(false, n));
		}

	};

	var sumTest = {
		"sum integer" : function() {
			doh.is(10, _testType(number.sum(1, 2, 3, 4)));
		},
		"sum float" : function() {
			// problem: 0.1 + 0.2 = 0.30000000000000004
			doh.is(0.3, _testType(number.sum(0.1, 0.2)));

			// problem: 0.1 + 0.1 + 0.1 = 0.30000000000000004
			doh.is(0.3, _testType(number.sum(0.1, 0.1, 0.1)));

			// problem: -0.1 - 0.2 = -0.30000000000000004
			doh.is(-0.3, number.sum(-0.1, -0.2));

			// problem: 16.1 + 3.3 = 19.400000000000002
			doh.is(19.4, number.sum(16.1, 3.3));

			// problem: 19.98 + 3.33 = 19.979999999999997
			doh.is(19.98, number.sum(16.65, 3.33));

			// problem: 22.222222 + 11.111111 = 33.333332999999996
			doh.is(33.333333, number.sum(22.222222, 11.111111));

			doh.is(0.35, number.sum(0.15, 0.2));
			doh.is(-0.1, number.sum(0.15, -0.25));
		},
		"sum float array" : function() {
			doh.is(0.3, _testType(number.sum([
				0.1,
				0.2
			])));

			doh.is(19.98, _testType(number.sum([
				16.65,
				3.33
			])));

			doh.is(100, _testType(number.sum([
				11.111111,
				11.111111,
				11.111111,
				11.111111,
				11.111111,
				11.111111,
				11.111111,
				11.111111,
				11.111112
			])));
		},
		"sum by property" : function() {
			doh.is(0.3, number.sum({
				rate : 0.1
			}, {
				rate : 0.2
			}, {
				// rate not found, ignored
				dog : 0.2
			}, "rate"));

			doh.is(0.3, number.sum([
				{
					rate : 0.1
				},
				{
					rate : 0.2
				},
				{
					// rate not found, ignored
					dog : 0.2
				}
			], "rate"));
		},
		"sum by property index" : function() {
			// not usual use-case but can be done
			doh.is(0.3, number.sum([
				0.1,
				0.9
			], [
				0.2,
				0.9
			], "0")); // "prop" must be string!
		},
		"sum dynamic value" : function() {
			doh.is(0.3, number.sum({
				useLowRate : true,
				lowRate : 0.1,
				highRate : 0.7
			}, {
				useLowRate : false,
				lowRate : 0.6,
				highRate : 0.2
			}, function(o) {
				return o[o.useLowRate ? "lowRate" : "highRate"];
			}));

			doh.is(0.3, number.sum([
				{
					useLowRate : true,
					lowRate : 0.1,
					highRate : 0.7
				},
				{
					useLowRate : false,
					lowRate : 0.6,
					highRate : 0.2
				}
			], function(o) {
				return o[o.useLowRate ? "lowRate" : "highRate"];
			}));
		},
		"sum transformed value" : function() {
			doh.is(0.6, number.sum(0.1, 0.2, function(n) {
				return n * 2;
			}));

			doh.is(0.6, number.sum([
				0.1,
				0.2
			], function(n) {
				return n * 2;
			}));
		},
		"sum wrong inputs" : function() {
			// non-numbers must be ignored
			doh.is(0, number.sum("a", "b", "c"));
			doh.is(6, number.sum("a", 6, "c"));
			doh.is(0, number.sum([
				"a",
				"b"
			], "c"));

			doh.is(0, number.sum({
				a : 5
			}, {
				b : 6
			}/*no prop*/));

			doh.is(0, number.sum(function() {
				return 4;
			}));
		},
		"sum empty/nulls" : function() {
			doh.is(0, number.sum(null, undefined, false));
			doh.is(0, number.sum([
				null,
				undefined,
				false
			], "x"));

			doh.is(0.3, number.sum(null, undefined, false, function() {
				return 0.1;
			}));

			doh.is(0.3, number.sum([
				null,
				undefined,
				false
			], function() {
				return 0.1;
			}));
		}
	};

	//test object for es6 mixed methods isInteger, isSafeInteger - gjax/number/es6.js
	var es6MethodsTest = {
		"isInteger() checks if value is an Integer - finite number without non-zero decimal part" : function() {
			var n = 2;
			doh.t(number.isInteger(n));

			n = 2.0;
			doh.t(number.isInteger(n));

			n = 0xFFFFFF;
			doh.t(number.isInteger(n));
		},

		"isInteger() - infinity numbers, not numbers (strings, booleans) are not an Integer" : function() {
			var n = Infinity;
			doh.f(number.isInteger(n));

			//also numbers with non-zero decimal part are NOT Integers
			n = 3.14;
			doh.f(number.isInteger(n));

			n = "abc";
			doh.f(number.isInteger(n));

			n = "NaN";
			doh.f(number.isInteger(n));

			n = false;
			doh.f(number.isInteger(n));
		},

		"isSafeInteger() is Integer in rage MIN_SAFE_INTEGER < value < MAX_SAFE_INTEGER" : function() {
			var n = 2;
			doh.t(number.isSafeInteger(n));

			n = 2.0;
			doh.t(number.isSafeInteger(n));

			//range of safe integer is -((25^3) - 1) < value <  (25^3) - 1
			n = Math.pow(2, 53) - 1;
			doh.t(number.isSafeInteger(n));

			n = -(Math.pow(2, 53) - 1);
			doh.t(number.isSafeInteger(n));
		},

		"isSafeInteger() numbers out of the range are not Integers " : function() {
			var n = Math.pow(2, 53);
			doh.f(number.isSafeInteger(n));

			n = -(Math.pow(2, 53));
			doh.f(number.isSafeInteger(n));
		}
	};

	doh.register("gjax/_base/number", testObject);
	doh.register("gjax/_base/number-sum", sumTest);
	doh.register("gjax/_base/number-es6Methods", es6MethodsTest); //tests for es6 mixed methods isInteger, isSafeInteger

	// runnable with: node (dnode)
	has("host-browser") || doh.run();
});
