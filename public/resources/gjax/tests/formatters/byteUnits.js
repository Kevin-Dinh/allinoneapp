/**
 * created 06/29/2015
 * 
 * @author marcus
 * @see http://livedocs.dojotoolkit.org/util/doh
 * @description TODO: fill in description
 * 
 * @generated by TemplateWizard, v.2015/01/08 //do not remove this comment please
 */
define([
	"doh",
	"dojo/has",
	"dojo/string",
	"gjax/formatters/byteUnits"
], function(doh, has, string, byteUnitsFormatter) {

	function test(filesizeformat) {
		// test object
		return {
			"default formating" : function() {

				doh.is("100 bytes", filesizeformat(100));
				doh.is("1.0 KB", filesizeformat(1024));
			},
			"rounding" : function() {
				// REVIEW: is this expected math ? 2KB as 2048 !! I dont think so
				// specially nit usabe for historgrams, good for formating but otherwise flawwed
				doh.is("2.0 KB", filesizeformat(2000));
			},
			"templating" : function() {

				doh.is("2.0KB [2000 bytes]", filesizeformat(2000, "${value}${units} [${original} bytes]"));
			},
			"zero" : function() {

				doh.is("0 bytes", filesizeformat(0));
			},
			"zero templates" : function() {

				doh.is("0bytes [0 bytes]", filesizeformat(0, "${value}${units} [${original} bytes]"));
			},
			"TB" : function() {

				doh.is("2794.0 GB", filesizeformat(3000000000000));
			},
			"negative values" : function() {
				//TODO: define behavior and fix codes
			}
		};
	}

	doh.register("gjax/formatters/byteUnits", test(byteUnitsFormatter));
	
	

	//	// refactoring experiments
	//
	//	//draft of optimized version of byteUnitsFormatter (CODEREVIEW: still ugly and unreadable, still buggy)
	//	var byteUnitsFormatterRefactored = function(value, template) {
	//
	//		// summary:
	//		//		Format the value like a 'human-readable' file size (i.e. 13 KB, 4.1 MB, 102 bytes, etc).
	//		var unitsValue = [
	//			"bytes",
	//			"KB",
	//			"MB",
	//			"GB"
	//		];
	//		var unitGroup = value === 0 ? 0 : Math.floor((Math.log(value) / Math.log(1024)));
	//		var v = value < 1024 ? value : (value / Math.pow(1024, unitGroup)).toFixed(1);
	//		var u = value == 1 ? "byte" : unitsValue[unitGroup];
	//
	//		return template ? string.substitute(template, {
	//			value : v,
	//			units : u,
	//			original : value
	//		}) : v + " " + u;
	//	};
	//
	//	var byteUnitsFormatterRefactored2 = function(value, template) {
	//
	//		// summary:
	//		//		Format the value like a 'human-readable' file size (i.e. 13 KB, 4.1 MB, 102 bytes, etc).
	//		var unitsValue = [
	//			"bytes",
	//			"KB",
	//			"MB",
	//			"GB"
	//		];
	//		var unitGroup = 0;
	//		var v = value;
	//		while (v >= 1024 && unitGroup < unitsValue.length - 1) {
	//			v = v / 1024;
	//			unitGroup++;
	//		}
	//		// bytes are not formated to fixed by original alg
	//		unitGroup && (v = v.toFixed(1));
	//		var u = value == 1 ? "byte" : unitsValue[unitGroup];
	//
	//		return template ? string.substitute(template, {
	//			value : v,
	//			units : u,
	//			original : value
	//		}) : v + " " + u;
	//	};
	//	
	//	
	//	doh.register("gjax/formatters/byteUnits-refactored", test(byteUnitsFormatterRefactored));//test also the optimization form of filesize();
	//	doh.register("gjax/formatters/byteUnits-refactored2", test(byteUnitsFormatterRefactored2));//test also the optimization form of filesize();

	//	// ---------------------------- performance test -------------
	//	var performanceTestObjectPow = {
	//		name : "formatters-performance-test-pow",
	//		testType : "perf",
	//		trialDuration : 100,
	//		trialDelay : 50,
	//		trialIterations : 50,
	//		setUp : function() {
	//			// Setup to do before runTest.
	//		},
	//		tearDown : function() {
	//			// cleanup to do after runTest.
	//		},
	//		runTest : function() {
	//			Math.pow(1024, 3);
	//		}
	//	};
	//
	//	var performanceTestObjectMultiplication = {
	//		name : "formatters-performance-test-multiplication",
	//		testType : "perf",
	//		trialDuration : 100,
	//		trialDelay : 50,
	//		trialIterations : 50,
	//		setUp : function() {
	//			// Setup to do before runTest.
	//		},
	//		tearDown : function() {
	//			// cleanup to do after runTest.
	//		},
	//		runTest : function() {
	//			1024 * 1024 * 1024;
	//		}
	//	};

	//performance tests
	//doh.register("formatters-Object-Perf-Test-Pow", performanceTestObjectPow);
	//doh.register("formatters-Object-Perf-Test-Multiplication", performanceTestObjectMultiplication);

	// runnable with: node (dnode)
	has("host-browser") || doh.run();

});
