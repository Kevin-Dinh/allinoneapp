/**
 * created 23/10/2013
 * 
 * @author jukrop
 * @see http://livedocs.dojotoolkit.org/util/doh
 * @description test of jwt API
 * 
 * @generated by TemplateWizard, v.2013/01/03 //do not remove this comment please
 */
define([
	"doh",
	//tested libraries
	"gjax/jwt",
	"dojo/_base/lang"
], function(doh, jwt, lang) {

	var payload = {
		client : {
			personalNum : "650321/8790",
			surname : "Holý",
			firstName : "Ján"
		},
		inquirer : {
			personalNum : "930318/4710",
			surname : "Holý",
			firstName : "Andrej"
		}
	};

	// test object
	var testObject = {
		securedJWT : function() {
			var token = jwt.serialize(lang.mixin({}, payload));

			/*jshint laxbreak:true*/
			doh.is("eyJ0eXAiOiJKV1QiLCJhbGciOiJTSEEtMjU2In0.eyJjbGllbnQiOnsicGVyc29uYWxOdW0iOiI2NTAzMjEvODc5MCIsInN1cm5hbWUiOiJIb2zDv"
					+ "SIsImZpcnN0TmFtZSI6IkrDoW4ifSwiaW5xdWlyZXIiOnsicGVyc29uYWxOdW0iOiI5MzAzMTgvNDcxMCIsInN1cm5hbWUiOiJIb2zDvSIsImZpcnN"
					+ "0TmFtZSI6IkFuZHJlaiJ9fQ.dUiE6YIcFpJokGMIIbjDyDaB1OowmLBNn-YrDFal7VI", token);

			doh.is(payload, jwt.parse(token));
		},
		unsecuredJWT : function() {
			var token = jwt.serialize(lang.mixin({}, payload), true);

			/*jshint laxbreak:true*/
			doh.is("eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJjbGllbnQiOnsicGVyc29uYWxOdW0iOiI2NTAzMjEvODc5MCIsInN1cm5hbWUiOiJIb2zDv"
					+ "SIsImZpcnN0TmFtZSI6IkrDoW4ifSwiaW5xdWlyZXIiOnsicGVyc29uYWxOdW0iOiI5MzAzMTgvNDcxMCIsInN1cm5hbWUiOiJIb2zDvSIsImZpcnN"
					+ "0TmFtZSI6IkFuZHJlaiJ9fQ.", token);

			doh.is(payload, jwt.parse(token));
		},
		tamperedSignature : function() {
			var token = jwt.serialize(lang.mixin({}, payload));
			token += "abc";
			try {
				jwt.parse(token);
				throw new Error("Error expected");
			} catch (e) {
				doh.is("Assertion failed: JWT signature does not match", e.message);
			}
		},
		wrongStructure : function() {
			try {
				jwt.parse("abcd");
				throw new Error("Error expected");
			} catch (e) {
				doh.is("Assertion failed: JWT must have three parts", e.message);
			}
			try {
				jwt.parse("a.bcd");
				throw new Error("Error expected");
			} catch (e) {
				doh.is("Assertion failed: JWT must have three parts", e.message);
			}
			try {
				jwt.parse("a.b.c.d");
				throw new Error("Error expected");
			} catch (e) {
				doh.is("Assertion failed: JWT must have three parts", e.message);
			}
		},
		wrongContent : function() {
			try {
				jwt.parse("abc.def.");
			} catch (e) {
				doh.is("Cannot decode JWT segment", e.message);
			}
		}

	};
	doh.register("gjax/jwt", testObject);

});
