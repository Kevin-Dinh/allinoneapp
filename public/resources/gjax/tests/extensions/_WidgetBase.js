/**
 * created 03/14/2013
 * 
 * @author arakovsky, jukrop
 * 
 * @description unit test for module "gjax/extensions/_WidgetBase"
 * 
 * @generated by TemplateWizard, v.2012/11/21 //do not remove this comment please
 * @see http://livedocs.dojotoolkit.org/util/doh
 */
define([
	"dojo/ready",
	"doh",
	"dijit/registry",
	"dojo/dom-style",
	"gjax/extensions/_WidgetBase",
	"gjax/extensions/_FormValueWidget", //we are testing show/hide which are overriden for formValueWidgets, but test them on one place
	"dijit/form/Button",
	"dijit/form/ValidationTextBox",
	"dojo/parser"
], function(ready, doh, registry, domStyle, extension1, extension2, Button) {

	var testObject = {
		testHiddenInMarkup : function() {
			doh.t(domStyle.get(registry.byId("btn1").domNode, "display") == "none");
			doh.t(domStyle.get(registry.byId("btn2").domNode, "display") != "none");
		},
		testHiddenOnProgramaticallyCreated : function() {
			var btn3 = new Button({
				label : "Button 3",
				hidden : true
			});
			btn3.placeAt("btn3");
			btn3.startup();
			var btn4 = new Button({
				label : "Button 4",
				hidden : false
			});
			btn4.placeAt("btn4");
			btn4.startup();
			doh.t(domStyle.get(btn3.domNode, "display") == "none");
			doh.t(domStyle.get(btn4.domNode, "display") != "none");
		},
		testHiddenSetter : function() {
			var btn5 = registry.byId("btn5");
			var btn6 = registry.byId("btn6");
			doh.t(domStyle.get(btn5.domNode, "display") == "none");
			doh.t(domStyle.get(btn6.domNode, "display") != "none");
			btn5.set("hidden", false);
			btn6.set("hidden", true);
			doh.t(domStyle.get(btn5.domNode, "display") != "none");
			doh.t(domStyle.get(btn6.domNode, "display") == "none");
		},
		testShowHide : function() {
			var btn7 = registry.byId("btn7");
			var btn8 = registry.byId("btn8");
			doh.t(domStyle.get(btn7.domNode, "display") == "none");
			doh.t(domStyle.get(btn8.domNode, "display") != "none");
			btn7.show();
			btn8.hide();
			doh.t(domStyle.get(btn7.domNode, "display") != "none");
			doh.t(domStyle.get(btn8.domNode, "display") == "none");
		},
		testDisplayPreserving : function() {
			var btn9 = registry.byId("btn9");
			btn9.hide();
			btn9.show();
			doh.t(domStyle.get(btn9.domNode, "display") == "inline");
		},
		testInvisibleInMarkup : function() {
			doh.is("hidden", domStyle.get(registry.byId("btn10").domNode, "visibility"));
			doh.isNot("hidden", domStyle.get(registry.byId("btn11").domNode, "visibility"));
		},
		testInvisibleOnProgramaticallyCreated : function() {
			var btn12 = new Button({
				label : "Button 12",
				invisible : true
			});
			btn12.placeAt("btn12");
			btn12.startup();
			var btn13 = new Button({
				label : "Button 13",
				invisible : false
			});
			btn13.placeAt("btn13");
			btn13.startup();
			doh.is("hidden", domStyle.get(btn12.domNode, "visibility"));
			doh.isNot("hidden", domStyle.get(btn13.domNode, "visibility"));
		},
		testInvisibleSetter : function() {
			var btn14 = registry.byId("btn14");
			var btn15 = registry.byId("btn15");
			doh.is("hidden", domStyle.get(btn14.domNode, "visibility"));
			doh.isNot("hidden", domStyle.get(btn15.domNode, "visibility"));
			btn14.set("invisible", false);
			btn15.set("invisible", true);
			doh.isNot("hidden", domStyle.get(btn14.domNode, "visibility"));
			doh.is("hidden", domStyle.get(btn15.domNode, "visibility"));
		},
		testIsDestroyed : function() {
			var btn16 = registry.byId("btn16");
			doh.t(!btn16.isDestroyed());
			btn16.destroyRecursive();
			doh.t(btn16.isDestroyed());
		}
	};

	var testObjectOn = {
		testSimpleOnOnce : function() {
			var testResult = new doh.Deferred();
			var testTB = registry.byId("testTB");
			// check if onOnce acts like on
			testTB.onOnce("change", function(value) {
				if (value === "testSimpleOnOnce") {
					testResult.resolve();
				} else {
					testResult.reject();
				}
			});

			testTB.set("value", "testSimpleOnOnce");

			return testResult;
		},
		testSimpleOnPausable : function() {
			var testResult = new doh.Deferred();
			var testTB = registry.byId("testTB");
			// check if onPausable acts like on
			var handler = testTB.onPausable("change", function(value) {
				if (value === "testSimpleOnPausable") {
					testResult.resolve();
				} else {
					testResult.reject();
				}
				handler.remove();
			});

			testTB.set("value", "testSimpleOnPausable");

			return testResult;
		},
		onPausable : function() {
			var testResult = new doh.Deferred();

			var testTB = registry.byId("testTB");

			var handler = testTB.onPausable("change", function(value) {
				if (value === "testOnPausableResume") {
					testResult.resolve();
				} else { // if value testOnPausablePause, pause doesnt work
					testResult.reject();
				}
				handler.remove();
			});

			handler.pause(); // pause handler
			testTB.set("value", "testOnPausablePause"); // set value, should not be handled in change 
			handler.resume(); // resume handler
			testTB.set("value", "testOnPausableResume");

			return testResult;
		},
		onOnce : function() {
			var counter = 0;
			var btn17 = registry.byId("btn17");

			btn17.onOnce("click", function() {
				counter++;
			});

			btn17.onClick();
			btn17.onClick();

			doh.is(counter, 1);
		}
	};

	// --------------------------------------
	doh.register("widget-base", testObject);
	doh.register("widget-base-on", testObjectOn);

	ready(function() {
		doh.run();
	});
});