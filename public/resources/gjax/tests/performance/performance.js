/**
 * created 12/20/2012
 * 
 * @author marcus
 * 
 * @description 
 * 
 * @generated by TemplateWizard, v.2012/11/21 //do not remove this comment please
 * @see http://livedocs.dojotoolkit.org/util/doh
 */
define([
	"dojo/ready",
	"doh",
	"dojo/has",
	"dojo/_base/array",
	"gjax/async/timeout",
	"dojo/request/registry", //
	"gjax/error",
	//tested libraries
	"gjax/performance"

], function(ready, doh, has, array, timeout, request, error, performance) {

	//TODO: FINISH THIS TESTCASE (this is only draft)
	var testObject = {
		"has" : function() {
			array.forEach([
				"performance-navigation-timing",
				"performance-timeline",
				"performance-resource-timing",
				"performance-user-timing"
			], log);
			function log(feature) {
				console.log(feature, ":", has(feature));
			}
		},
		"user timing mark" : {
			tearDown : function() {
				performance.clearMarks();
			},
			runTest : function() {
				//REVIEW: better test? test if start time is OK?
				performance.mark("a");
				return timeout(10, true)//
				.then(function() {
					performance.mark("b");

					var aMark = performance.getEntriesByName("a")[0];
					var bMark = performance.getEntriesByName("b")[0];

					doh.t(aMark.startTime < bMark.startTime, "Wrong start times: " + aMark.startTime + " " + bMark.startTime);
				});
			}
		},
		"timeline by name" : {
			tearDown : function() {
				performance.clearMarks();
			},
			runTest : function() {
				performance.mark("a");
				performance.mark("b");
				performance.mark("a");

				doh.is(2, performance.getEntriesByName("a").length, "A entries length");
				doh.is(1, performance.getEntriesByName("b").length, "B entries length");
			}
		},
		"timeline by type" : {
			tearDown : function() {
				performance.clearMarks();
			},
			runTest : function() {
				performance.mark("a");
				performance.mark("b");
				performance.mark("a");

				doh.is(3, performance.getEntriesByType("mark").length, "mark entries length");
				//TODO: update when resource implemented
			}
		},
		"resource timing" : function() {
			//REVIEW: better test? test if start time is OK?
			var during, before = performance.now();
			performance.clearResourceTimings();
			var testPromise = request.get("/foo")//
			.then(error.callbackPass, function() {
				var after = performance.now();
				var ent = array.filter(performance.getEntriesByType("resource"), function(entry) {
					return entry.initiatorType == "xmlhttprequest" && entry.name.indexOf("/foo") >= 0;
				})[0];

				doh.t(!!ent, "entry /foo not found");
				doh.t(leAprox(before, ent.startTime), "before must be LE startTime");
				doh.t(leAprox(ent.startTime, during), "startTime must be LE during");
				doh.t(leAprox(during, ent.responseEnd), "during must be LE responseEnd");
				doh.t(leAprox(ent.responseEnd, after), "responseEnd must be LE after");

				function leAprox(a, b) {
					return Math.floor(a) <= Math.floor(b); //native timing feature has also decimal numbers
				}
			});
			during = performance.now();
			return testPromise;
		} 
	};

	// --------------------------------------
	doh.register("test01", testObject);

	ready(function() {
		doh.run();
	});
});