/**
 * created 11/23/2012
 * 
 * @author marcus
 * 
 * @description POC implementation of form submition with charset
 * library, originated when we needed to send URLs containing characters in euc-kr encoding not in UTF-8
 * it is usefull for integration with legacy systems that do not support UTF-8 encoding in URLS
 * 
 * 
 * 
 * @generated by TemplateWizard, v.2012/11/21 //do not remove this comment please
 * @see http://livedocs.dojotoolkit.org/util/doh
 */
define([
	"dojo/ready",
	"doh",
	"dojo/dom",
	"dojo/_base/array",
	"dojo/dom-construct",
	"dojo/Deferred",
	"dojo/_base/lang",
	"dojo/sniff",
    "gjax/async/waitFor"
], function(ready, doh, dom, array, domConstruct, Deferred, lang, has, waitFor) {

	// in data
	var testData = {
		hangul : "\ub9c8\ucee4\uc2a4", //"마커스", marcus
		slovak : "\u017e\u0165" //žť
	};
	var charsets = {
		"windows-1250" : "windows-1250",
		"UTF-8" : "UTF-8",
		"euc-kr" : "euc-kr"
	};
	//
	var expectedResults = {
		hangul : {
			"windows-1250" : "param1=%26%2347560%3B%26%2352964%3B%26%2349828%3B", //this one fails in MSIE, question is if handgul UNicode can be respresented in windows1250
			"UTF-8" : "param1=%EB%A7%88%EC%BB%A4%EC%8A%A4",
			"euc-kr" : "param1=%B8%B6%C4%BF%BD%BA"
		}
	};

	function _submitWithEncoding(data, charset, expectedResult) {

		var f = dom.byId("f1");
		f.acceptCharset = charset; //form must have accept-charset set to desired charset
		// however it is not enough, see submitFormWithCharset

		// fill in with sample data
		f.elements["param1"].value = data;

		// setup
		var docChanged = waitFor(waitFor.c.documentChanged(window.frames["w1"]), 3000);

		submitFormWithCharset(f); //f.submit() in non MSIE, hacks in MSIE

		var testResult = new doh.Deferred();
		docChanged.then(function(doc) {
			if (doc.URL.split("?")[1] === expectedResult) { // lame but enough here
				testResult.callback();
			} else {
				testResult.errback("unexpected url:" + doc.URL);				
			}
		});//no error back needed it is timeout anyway
		return testResult;
	}
	/*
	1) document.charset         (MSIE, read-write)
	2) document.defaultCharset (MSIE, read-only)
	3) document.characterSet    (Firefox, read-only)
	4) document.actualEncoding (Firefox, old DOM3 drafts, read-only)
	5) document.inputEncoding   (actualEncoding was renamed so in DOM3; Firefox
	*/
	var charsetTests = {};
	array.forEach("charset,defaultCharset,characterSet,actualEncoding,inputEncoding".split(','), function(propName) {
		charsetTests["read-" + propName] = function() {
			doh.t(propName in document);
		};
		charsetTests["write-" + propName] = function() {
			doh.t(propName in document);
			var ch = charsets["euc-kr"];
			document[propName] = ch;
			doh.is(ch, document[propName]);
		};
	});

	var spikes = {

		"euckr-hangul" : function() {
			var ch = "euc-kr", l = "hangul";
			return _submitWithEncoding(testData[l], charsets[ch], expectedResults[l][ch]);
		},
		"UTF-8-hangul" : function() {
			var ch = "UTF-8", l = "hangul";
			return _submitWithEncoding(testData[l], charsets[ch], expectedResults[l][ch]);
		},
		"windows-1250-hangul" : function() { //fails in MSIE
			var ch = "windows-1250", l = "hangul";
			return _submitWithEncoding(testData[l], charsets[ch], expectedResults[l][ch]);
		}

	};

	// --------------------------------------
	// tests proving implementation concepts used in _charset.js library
	// all of them shall pass in all browsers
	doh.register("charset/spikes", spikes, function() {
		_setupUpGroupTimeout(this, 5000);
	});
	// some of them expected to fail
	//doh.register("charset/APISupport", charsetTests);
	//-------------------------------------------------------------------------------------------------------

	var submitFormWithCharset = has("ie") /*jshint laxbreak:true*/
	? function _submitFormWithCharsetMsie(form) {
		var _charset;
		try {
			_charset = document.charset;
			document.charset = form.acceptCharset; //TODO: naive reliest on single value not list
			console.debug("withCharset old:", _charset, ",new:", document.charset);
			form.submit();
		} finally {
			document.charset = _charset;
		}
	} // 
	: function _submitFormWithCharset(form) {
		form.submit();
	};
	function _setupUpGroupTimeout(testGroup, timeoutOfEachFixture) {

		// use this function to setup each object in testGroup
		// specially when using register([]) with array of functions and not array of objects (fixtures)
		array.forEach(testGroup, function(fixture) {
			// sets timeout to each fixrure in supplied testGroup
			// used as part of setUp function
			/*jshint expr:true */
			fixture.timeout || (fixture.timeout = timeoutOfEachFixture);
		});
	}

	// see C:\Workspaces\RISRS.Prl\GL_LANG\testcases\TestRunner2\GeneralUITest.js
	ready(function() {
		doh.run();
	});

});