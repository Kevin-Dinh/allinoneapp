/**
 * created 03/18/2016
 * 
 * @author marcus
 * @see http://livedocs.dojotoolkit.org/util/doh
 * @description test for gjax/promise/waterfall
 * 
 * @generated by TemplateWizard, v.2015/07/16 //do not remove this comment please
 */
define([
	"doh",
	"dojo/has",
	"dojo/Deferred",
// tested libraries
	"gjax/promise/waterfall"
], function(doh, has, Deferred, waterfall) {

	doh.register("waterfall", {
		"waterfall is" : function() {
			doh.is("function", typeof waterfall,"is function");
			doh.is("function", typeof waterfall(),	"is function that returns function");
			doh.t("then" in waterfall()(),"is function that returns function returning promise");
		},
		"waterfall([f1,f2]) means (new Deferred.resolve()).then(f1).then(f2)" : function() {
			
			return waterfall([
				f1,
				f2
			])("f1-args").then(assert);
			
			
			function assert() {
				doh.assertTrue(f1.called);
				doh.assertEqual("f1-args",f1.args[0],"shell be called with return of previous");
				doh.assertTrue(f2.called);
				doh.assertEqual("f2-args",f2.args[0],"shell be called with return of previous");
			}
			
			function f1(/*arg*/) {
				f1.args = arguments;
				// f1 is called with no args
				var deferred = new Deferred(); 
				setTimeout(function(){
					f1.called = 1;
					
					deferred.resolve("f2-args");
				}, 10);
				return deferred;
			}
			function f2() {
				f2.called = 1;
				f2.args = arguments;
			}
		}

	});
	
	



	// runnable with: node (dnode)
	has("host-browser") || doh.run();

});
