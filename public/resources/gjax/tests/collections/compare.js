/**
 * created 12/03/2012
 * 
 * @author marcus
 * @see http://livedocs.dojotoolkit.org/util/doh
 * @description only draft
 * 
 * @generated by TemplateWizard, v.2012/11/21 //do not remove this comment please
 */
define([
	"dojo",
	"doh",
	"gjax/testing/asserts",
	//tested libraries
	"gjax/collections/compare"

], function(dojo, doh, asserts, comp) {

	var undef;
	var a1 = [
		3,
		2,
		1,
		undef,
		null,
		NaN,
		0
	]; //TODO: run with shufle ? several times ?

	var testObject = {
		"comparator never called for undefined" : function() {
			var called = 0;
			[
				undef,
				undef,
				undef
			].sort(function() { /* git-qa */
				called += 1;
			});
			doh.is(0, called, //
			"Comparator is not called for undefined values, they are sorted at the end");
		},
		"compare-falsyAware" : function() {

			var actual = a1.slice(0);
			actual.sort(comp.falsyAware);

			asserts.assertArrayEquals([
				0,
				1,
				2,
				3,
				// all aflsy values are sorted at the end, this is by design and shall not be changed
				// undef is the last (by JS 1.2 design and see previous test)
				NaN,
				null,
				undef
			], actual);
		},
		"compare-including-infinities" : function() {

			var actual = [
				undefined,
				null,
				Infinity,
				-Infinity
			].sort(comp.falsyAware);

			asserts.assertArrayEquals([
				-Infinity,
				Infinity, //yes with this comparatr, Infinity is less than null or undefined, this is by design
				null,
				undefined
			], actual);
		},
		"byProperty" : function() {
			var data = [
				{
					a : 1
				},
				{
					a : -1
				}
			].sort(comp.byProperty("a"));
			doh.t(data[0].a === -1);
			doh.t(data[1].a === 1);

		},
		"byProperties" : function() {
			var data = [
				{
					a : 1,
					b : 3
				},
				{
					a : 1,
					b : 2
				}
			].sort(comp.byProperties([
				"a",
				"b"
			]));
			doh.t(data[0].b === 2);
			doh.t(data[1].b === 3);

			data = [
				{
					a : 2,
					b : 0
				},
				{
					a : 1,
					b : 2
				},
				{
					a : 1,
					b : 1
				}
			].sort(comp.byProperties([
				"a",
				"b"
			]));
			doh.t(data[0].a === 1 && data[0].b === 1);
			doh.t(data[1].a === 1 && data[1].b === 2);
			doh.t(data[2].a === 2 && data[2].b === 0);
		}

	//TODO: others
	};
	var bugs = {
		"string sort bug" : function() {
			var actual = [
				"b",
				"a",
				"c"
			].sort(comp.falsyAware);

			console.log(actual);

			asserts.assertArrayEquals([
				"a",
				"b",
				"c"
			], actual);
		}
	};

	doh.register("gjax/collections/compare", testObject);
	doh.register("gjax/collections/compare-bugs", bugs);
});
