/**
 * created 01/08/2015
 * 
 * @author marcus
 * @see http://livedocs.dojotoolkit.org/util/doh
 * @description This is not a real library test case 
 * it is just a demonstration that we actually 
 * DO NOT NEED any "LOGICAL ARRAY OPERATORS LIBRARY IN JAVASCRIPT"
 * All can be done with standard Array methods and simple well named callback
 * 
 * @generated by TemplateWizard, v.2015/01/08 //do not remove this comment please
 */
define([
	"doh",
	"dojo/has",
//tested libraries
// TODO: add tested libraries
	"dojo/_base/array" //
], function(doh, has, array) {

	// test object
	function isTruthy(item) {
		return !!item;
	}
	function not(f) {
		return function() {
			return !f.apply(null, arguments);
		};
	}

	var testObject = {

		"every" : function() {
			var items = [
				true,
				true,
				true
			];
			var result = array.every(items, isTruthy);

			doh.t(result);
		},
		"every - beware: empty array return true" : function() {

			var items = [];

			var result = array.every(items, isTruthy);

			doh.t(result);

			// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every

			// every acts like the "for all" quantifier in mathematics. 
			// In particular, for an empty array, it returns true. 
			//(It is vacuously true that all elements of the empty set satisfy any given condition.)
		},
		"every - to check for at leas one item and all must be true" : function() {

			var items = [];

			// UGLY !!!
			var result = items.length && array.every(items, isTruthy);
			doh.f(result);

		},
		"some" : function() {
			var items = [
				false,
				true,
				false
			];

			var result = array.some(items, isTruthy);
			doh.t(result);
		},
		"some - on empty return false" : function() {
			var items = [];

			var result = array.some(items, isTruthy);

			doh.f(result);
		},
		"none" : function() {
			var items = [
				false, //!!
				false,
				false
			];

			var result = !array.some(items, isTruthy);

			doh.t(result);
		},
		"none - empty" : function() {
			var items = [];
			var result = !array.some(items, isTruthy);

			doh.t(result);
		},
		"one - 1" : function() {
			var items = [
				true, //!!
				false,
				false
			];

			var result = 1 == array.filter(items, isTruthy).length;

			doh.t(result);
		},
		"one - 2 " : function() {
			var items = [
				true,
				false,
				true
			//!!
			];

			var result = 1 == array.filter(items, isTruthy).length;

			doh.f(result);
		},
		"one - empty " : function() {
			var items = [];

			var result = 1 == array.filter(items, isTruthy).length;

			doh.f(result);
		},

		"check properties" : function() {
			var o = {
				a : null,
				b : undefined,
				c : 0,
				d : "value"
			};

			function isEmpty(item) {
				//undefined or null 
				return item == null;
			}

			// some positive formulated semantic codes
			// the code shell be read the same way as assertion hint

			doh.t(array.some([
				o.a,
				o.b,
				o.c,
				o.d
			], isEmpty), "");

			doh.t(!array.every([
				o.a,
				o.b,
				o.c,
				o.d
			], isEmpty), "not every is empty");

			// 
			// never define isNotEmpty or is filled NEW methods, 
			// you will create inconsistencies very quickly, instead use not() function;

			doh.t(array.some([
				o.a,
				o.b,
				o.c,
				o.d
			], not(isEmpty)), "some are not empty");

		}

	};

	doh.register("logical-samples", testObject);

	// runnable with: node (dnode)
	has("host-browser") || doh.run();
});
