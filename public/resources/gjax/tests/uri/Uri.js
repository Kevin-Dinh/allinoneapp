/**
 * created 10/13/2012
 * 
 * @author jukrop
 * @see http://livedocs.dojotoolkit.org/util/doh
 * @description gjax/uri/Uri DOH test
 * 
 * @generated by TemplateWizard, v.2012/10/01 //do not remove this comment please
 */
define([
	"doh",
	"dojo/has",
	"dojo/_base/array",
	"dojo/_base/lang",
	"dojox/lang/functional/object",
	// tested libs
	"gjax/uri/Uri",
	"gjax/uri",
	//
	"dojo/date/stamp",
	"dojo/json",
	"dojo/_base/config"
], function(doh, has, array, lang, object, Uri, uri, stamp, json, config) {

	var svcCtx = "/foo";
	var uiCtx = "/foo";

	// ---------------------------- test object ------------------
	// private functions

	function getTest(fncName, data) {
		return function() {
			for (var i = 0; i < data.length; i += 2) {
				var input = data[i], expected = data[i + 1], output;
				input = lang.isArray(input) ? input : [
					input
				];
				try {
					output = Uri[fncName].apply(Uri, input);
				} catch (e) {
					output = e.message;
				}
				doh.is(expected, output, "Uri." + fncName + " " + json.stringify(expected) + " vs " + json.stringify(output));
			}
		};
	}

	// testing data
	var fullUri = "foo://username:password@my.example.com:8042/over/there/index.x.dtb?type=animal&name=narwhal#nose";
	var date = new Date(2002, 5, 30), isoDateEnc = encodeURIComponent(stamp.toISOString(date, {
		selector : "date"
	}))/*, isoDateTimeEnc = encodeURIComponent(stamp.toISOString(date))*/;
	// TODO more tests cases
	var location = has("host-browser") ? window.location : {
		// mock for node
		protocol : "http"
	};

	// structure "methodName" : [input(s)1, result1, input(s)2, result2, ...]
	var getterTestData = {
		"getScheme" : [
			null,
			location.protocol ? location.protocol.substring(0, location.protocol.length - 1) : undefined,
			fullUri,
			"foo",
			"/",
			undefined,
			"",
			undefined
		],
		"getAuthority" : [
			null,
			location.host || undefined,
			fullUri,
			"username:password@my.example.com:8042",
			"/",
			undefined,
			"",
			undefined
		],
		"getUserInfo" : [
			null,
			undefined, // TODO parse userinfo from location
			fullUri,
			"username:password",
			"/",
			undefined,
			"",
			undefined
		],
		"getHost" : [
			null,
			location.hostname || undefined,
			fullUri,
			"my.example.com",
			"/",
			undefined,
			"",
			undefined
		],
		"getPort" : [
			null,
			location.port || undefined,
			fullUri,
			"8042",
			"/",
			undefined,
			"",
			undefined
		],
		"getPath" : [
			null,
			location.pathname,
			fullUri,
			"/over/there/index.x.dtb",
			"/",
			"/",
			"",
			""
		],
		"getQuery" : [
			null,
			location.search ? location.search.substr(1) : undefined,
			fullUri,
			"type=animal&name=narwhal",
			"/",
			undefined,
			"",
			undefined,
			"/abc?",
			"",
			[
				fullUri,
				true
			],
			{
				type : "animal",
				name : "narwhal"
			},
			[
				"foo://username:password@my.example.com:8042/over/there/index.x.dtb?%EC%96%B8%EC%96%B4=%ED%95%9C%EA%B5%AD%EC%96%B4#nose",
				true
			],
			{
				"\uC5B8\uC5B4" : "\uD55C\uAD6D\uC5B4" // 언어 : 한국어	// hangul characters
			},
			[
				"/abc?date=" + isoDateEnc + "&search=newt",
				true
			],
			{
				"date" : date,
				search : "newt"
			},
//			[
//				"/abc?datetime=" + isoDateTimeEnc + "&search=newt",
//				true
//			],
//			{
//				"datetime" : date,
//				search : "newt"
//			},
			[
				"/abc?no1=123&no2=1236",
				true
			],
			{
				no1 : "123",
				no2 : "1236"
			},
			[
				"/abc?no1=123&no2=1236&no1=124",
				true
			],
			{
				no1 : [
					"123",
					"124"
				],
				no2 : "1236"
			},
			[ // RQL will not be parsed to object, Uri is unaware of RQL syntax
				"/abc?eq(x,1)&resolved(true)&select(puf)&sort(+a,-b)",
				true
			],
			{
				"eq(x,1)" : "",
				"resolved(true)" : "",
				"select(puf)" : "",
				"sort(+a,-b)" : ""
			},
			[ // RQL will not be parsed to object, Uri is unaware of RQL syntax
				"/abc?and(eq(x,1),resolved(true),select(puf),sort(+a,-b))",
				true
			],
			{
				"and(eq(x,1),resolved(true),select(puf),sort(+a,-b))" : ""
			},
			[
				"/",
				true
			],
			undefined,
			[
				"",
				true
			],
			undefined,
			[
				"/abc?",
				true
			],
			{},
			[
				"/abc?identity=claimNumber%3D074100009100%3BeventDate%3D2007-07-01T00%3A00%3A00%2B0200%3BpolicyNumber%3D700001642",
				true
			],
			{
				identity : "claimNumber=074100009100;eventDate=2007-07-01T00:00:00+0200;policyNumber=700001642"
			}
		],
		"getFragment" : [
			null,
			location.hash ? location.hash.substr(1) : undefined,
			fullUri,
			"nose",
			"/",
			undefined,
			"",
			undefined,
			"/abc#",
			""
//			[fullUri, true],
//			"nose", // not object - returns original string
//			["/abc#egg=yolk", true],
//			{egg:"yolk"},
//			["/", true],
//			undefined,
//			["/abc#", true],
//			"" // not object - returns original string
		]
	};
	var setterTestData = {
		"setScheme" : [
			[
				fullUri,
				null
			],
			"//username:password@my.example.com:8042/over/there/index.x.dtb?type=animal&name=narwhal#nose",
			[
				fullUri,
				"http"
			],
			"http://username:password@my.example.com:8042/over/there/index.x.dtb?type=animal&name=narwhal#nose"
		],
		"setAuthority" : [
			[
				fullUri,
				null
			],
			"foo:/over/there/index.x.dtb?type=animal&name=narwhal#nose",
			[
				fullUri,
				"localhost:8080"
			],
			"foo://localhost:8080/over/there/index.x.dtb?type=animal&name=narwhal#nose",
			[
				fullUri,
				"jozko:mrkva@localhost:8080"
			],
			"foo://jozko:mrkva@localhost:8080/over/there/index.x.dtb?type=animal&name=narwhal#nose"
		],
		"setUserInfo" : [
			[
				fullUri,
				null
			],
			"foo://my.example.com:8042/over/there/index.x.dtb?type=animal&name=narwhal#nose",
			[
				fullUri,
				"jozko:mrkva"
			],
			"foo://jozko:mrkva@my.example.com:8042/over/there/index.x.dtb?type=animal&name=narwhal#nose"
		],
		"setHost" : [
			[
				fullUri,
				"localhost"
			],
			"foo://username:password@localhost:8042/over/there/index.x.dtb?type=animal&name=narwhal#nose"
		],
		"setPort" : [
			[
				fullUri,
				null
			],
			"foo://username:password@my.example.com/over/there/index.x.dtb?type=animal&name=narwhal#nose",
			[
				fullUri,
				"8080"
			],
			"foo://username:password@my.example.com:8080/over/there/index.x.dtb?type=animal&name=narwhal#nose"
		],
		"setPath" : [
			[
				fullUri,
				"/a/b/c"
			],
			"foo://username:password@my.example.com:8042/a/b/c?type=animal&name=narwhal#nose",
			[
				fullUri,
				"/a/b?b/c"
			],
			"Illegal PCHAR sequence:?",
			[
				fullUri,
				"/a/%D7%90/c"
			],
			"foo://username:password@my.example.com:8042/a/%D7%90/c?type=animal&name=narwhal#nose",
			[
				fullUri,
				"/a/%FF%FF/c"
			],
			"Illegal PCHAR sequence:%FF%FF"
		],
		"setQuery" : [
			[
				fullUri,
				""
			],
			"foo://username:password@my.example.com:8042/over/there/index.x.dtb?#nose",
			[
				fullUri,
				null
			],
			"foo://username:password@my.example.com:8042/over/there/index.x.dtb#nose",
			[
				fullUri,
				"search=newt"
			],
			"foo://username:password@my.example.com:8042/over/there/index.x.dtb?search=newt#nose",
			[
				fullUri,
				{
					"date" : date,
					search : "newt"
				}
			],
			"foo://username:password@my.example.com:8042/over/there/index.x.dtb?date=" + isoDateEnc + "&search=newt#nose",
			[
				fullUri,
				{
					"\uC5B8\uC5B4" : "\uD55C\uAD6D\uC5B4" // 언어 : 한국어	// hangul characters
				}
			],
			"foo://username:password@my.example.com:8042/over/there/index.x.dtb?%EC%96%B8%EC%96%B4=%ED%95%9C%EA%B5%AD%EC%96%B4#nose"
		],
		"appendQuery" : [
			[
				fullUri,
				""
			],
			"foo://username:password@my.example.com:8042/over/there/index.x.dtb?type=animal&name=narwhal#nose",
			[
				fullUri,
				null
			],
			"foo://username:password@my.example.com:8042/over/there/index.x.dtb?type=animal&name=narwhal#nose",
			[
				fullUri,
				"search=newt"
			],
			"foo://username:password@my.example.com:8042/over/there/index.x.dtb?type=animal&name=narwhal&search=newt#nose",
			[
				fullUri,
				{
					"date" : date,
					search : "newt"
				}
			],
			"foo://username:password@my.example.com:8042/over/there/index.x.dtb?type=animal&name=narwhal&date=" + isoDateEnc + "&search=newt#nose"
		],
		"setFragment" : [
			[
				fullUri,
				""
			],
			"foo://username:password@my.example.com:8042/over/there/index.x.dtb?type=animal&name=narwhal#",
			[
				fullUri,
				null
			],
			"foo://username:password@my.example.com:8042/over/there/index.x.dtb?type=animal&name=narwhal",
			[
				fullUri,
				"puf"
			],
			"foo://username:password@my.example.com:8042/over/there/index.x.dtb?type=animal&name=narwhal#puf",
			[
				fullUri,
				0
			],
			"foo://username:password@my.example.com:8042/over/there/index.x.dtb?type=animal&name=narwhal#0",
			[
				fullUri,
				{
					"date" : date,
					search : "newt"
				}
			],
			"foo://username:password@my.example.com:8042/over/there/index.x.dtb?type=animal&name=narwhal#date=" + isoDateEnc + "&search=newt",
			[
				fullUri,
				{
					"\uC5B8\uC5B4" : "\uD55C\uAD6D\uC5B4" // 언어 : 한국어	// hangul characters
				}
			],
			"foo://username:password@my.example.com:8042/over/there/index.x.dtb?type=animal&name=narwhal#%EC%96%B8%EC%96%B4=%ED%95%9C%EA%B5%AD%EC%96%B4"
		],
		"appendFragment" : [
			[
				fullUri,
				""
			],
			"foo://username:password@my.example.com:8042/over/there/index.x.dtb?type=animal&name=narwhal#nose",
			[
				fullUri,
				null
			],
			"foo://username:password@my.example.com:8042/over/there/index.x.dtb?type=animal&name=narwhal#nose",
			[
				fullUri,
				"search=newt"
			],
			"foo://username:password@my.example.com:8042/over/there/index.x.dtb?type=animal&name=narwhal#nose&search=newt",
			[
				fullUri,
				{
					"date" : date,
					search : "newt"
				}
			],
			"foo://username:password@my.example.com:8042/over/there/index.x.dtb?type=animal&name=narwhal#nose&date=" + isoDateEnc + "&search=newt"
		],
		"appendSegments" : [
			[
				"",
				""
			],
			"/",
			[
				"",
				[
					""
				]
			],
			"/",
			[
				"/aaa/",
				"bbb"
			],
			"/aaa/bbb",
			[
				"/aaa/",
				"bbb",
				""
			],
			"/aaa/bbb/",
			[
				fullUri,
				""
			],
			"foo://username:password@my.example.com:8042/over/there/index.x.dtb/?type=animal&name=narwhal#nose",
			[
				fullUri,
				"aaa"
			],
			"foo://username:password@my.example.com:8042/over/there/index.x.dtb/aaa?type=animal&name=narwhal#nose",
			[
				fullUri,
				"aaa",
				"bbb"
			],
			"foo://username:password@my.example.com:8042/over/there/index.x.dtb/aaa/bbb?type=animal&name=narwhal#nose",
			[
				fullUri,
				"aaa",
				"bbb",
				""
			],
			"foo://username:password@my.example.com:8042/over/there/index.x.dtb/aaa/bbb/?type=animal&name=narwhal#nose",
			[
				fullUri,
				[
					"aaa"
				]
			],
			"foo://username:password@my.example.com:8042/over/there/index.x.dtb/aaa?type=animal&name=narwhal#nose",
			[
				fullUri,
				[
					"aaa",
					"bbb"
				]
			],
			"foo://username:password@my.example.com:8042/over/there/index.x.dtb/aaa/bbb?type=animal&name=narwhal#nose",
			[
				fullUri,
				[
					"aaa",
					"bbb",
					""
				]
			],
			"foo://username:password@my.example.com:8042/over/there/index.x.dtb/aaa/bbb/?type=animal&name=narwhal#nose",
			[
				fullUri,
				[
					"aaa",
					"bbb",
					""
				],
				null
			],
			"foo://username:password@my.example.com:8042/over/there/index.x.dtb/aaa/bbb/?type=animal&name=narwhal#nose",
			[
				fullUri,
				[
					"aaa",
					"bbb",
					""
				],
				"ccc"
			],
			"foo://username:password@my.example.com:8042/over/there/index.x.dtb/aaa/bbb/?type=animal&name=narwhal#nose",
			[
				fullUri,
				[
					"aaa",
					"bbb",
					"",
					"ccc"
				]
			],
			"foo://username:password@my.example.com:8042/over/there/index.x.dtb/aaa/bbb//ccc?type=animal&name=narwhal#nose"
		],
		"mixin" : [
			[
				fullUri,
				{}
			],
			fullUri,
			[
				fullUri,
				{
					scheme : "http",
					authority : "localhost:8080"
				}
			],
			"http://localhost:8080/over/there/index.x.dtb?type=animal&name=narwhal#nose",
			[
				fullUri,
				{
					port : 8080,
					userInfo : "jozko:mrkva",
					host : "localhost"
				}
			],
			"foo://jozko:mrkva@localhost:8080/over/there/index.x.dtb?type=animal&name=narwhal#nose",
			[
				fullUri,
				{
					port : 8080, // ignored
					userInfo : "jozko:mrkva", // ignored
					host : "localhost", // ignored
					authority : "engine:9090"
				}
			],
			"foo://engine:9090/over/there/index.x.dtb?type=animal&name=narwhal#nose",
			[
				fullUri,
				{
					port : 8080,
					path : "/a/b/c",
					query : {
						search : "newt"
					},
					fragment : null
				}
			],
			"foo://username:password@my.example.com:8080/a/b/c?search=newt"
		]

	};
	var utilTestData = {
		"equals" : [
			[
				"foo://username:password@my.example.com:8042/over/there/index.x.dtb?type=animal&name=narwhal#nose",
				"foo://username:password@my.example.com:8042/over/there/index.x.dtb?type=animal&name=narwhal#nose"
			],
			true,
			[
				"/a/b?type=animal&name=narwhal",
				"/a/b?name=narwhal&type=animal"
			],
			true,
			[
				"/a/b?eq(type,animal)&lt(count,3)",
				"/a/b?lt(count,3)&eq(type,animal)"
			],
			true,
			[
				"/a/b?a=1&b=2&a=3",
				"/a/b?b=2&a=3&a=1"
			],
			true,
			[
				"/a/b?a=1&b=2&a=3",
				"/a/b?b=2&a=1&a=4"
			],
			false,
			[
				"/a?",
				"/a"
			],
			false, // no query vs. empty query
			[
				"foo://a/b",
				"bar://a/b"
			],
			false,
			[
				"/a/b/",
				"/a/b"
			],
			false,
			[
				"foo://username:password1@my.example.com:8042/a",
				"foo://username:password2@my.example.com:8042/a"
			],
			false,
			[
				"/a#",
				"/a"
			],
			false, // no fragment vs. empty fragment
			[
				"/a#nose",
				"/a"
			],
			false,
			[
				"/a#",
				"/a",
				// ignoreFragment
				true
			],
			true,
			[
				"/a#nose",
				"/a",
				// ignoreFragment
				true
			],
			true,
			[
				"/a#nose",
				"/a#leg",
				// ignoreFragment
				true
			],
			true
		],
		"stripExtension" : [
			fullUri,
			"foo://username:password@my.example.com:8042/over/there/index?type=animal&name=narwhal#nose",
			"/a/b/c.d",
			"/a/b/c",
			"/a/b/c.d.f",
			"/a/b/c",
			"/a/b/c.d.f/",
			"/a/b/c.d.f/"
		],
		"stripPath" : [
			fullUri,
			"foo://username:password@my.example.com:8042",
			"/a/b/c.d",
			""
		],
		"stripCtxPrefix" : [
			uiCtx + "/a/b/1",
			"/a/b/1",
			uiCtx + "/over/there/index.x.dtb?type=animal&name=narwhal#",
			"/over/there/index.x.dtb?type=animal&name=narwhal#",
			svcCtx + "/a/b/1",
			"/a/b/1",
			svcCtx + "/over/there/index.x.dtb?type=animal&name=narwhal#",
			"/over/there/index.x.dtb?type=animal&name=narwhal#",
			"http:/a/b/1",
			"Assertion failed: IllegalArgument, context prefix not present",
			"http://localhost/a/b/1",
			"Assertion failed: IllegalArgument, context prefix not present",
			"http://localhost:8080/a/b/1",
			"Assertion failed: IllegalArgument, context prefix not present",
			"//localhost/a/b/1",
			"Assertion failed: IllegalArgument, context prefix not present"
		],
		"stripOrigin" : [
			fullUri,
			"/over/there/index.x.dtb?type=animal&name=narwhal#nose",
			"/a/b/c.d",
			"/a/b/c.d"
		],
		"getLastSegment" : [
			fullUri,
			"index.x.dtb",
			"/a/b/c",
			"c",
			"/a/b/c.d",
			"c.d",
			"/a/b/",
			"",
			"/",
			"",
			"",
			undefined
		],
		"denotesFolder" : [
			fullUri,
			false,
			"/a/b/c",
			false,
			"/a/b/c.d",
			false,
			"/a/b/",
			true,
			"/",
			true,
			"",
			false
		],
		"convertToFolder" : [
			fullUri,
			"foo://username:password@my.example.com:8042/over/there/?type=animal&name=narwhal#nose",
			"/a/b/c",
			"/a/b/",
			"/a/b/c.d",
			"/a/b/",
			"/a/b/",
			"/a/b/",
			"/",
			"/",
			"",
			"/"
		],
		"isSubordinate" : [
			[
				"/a/b/c",
				"/a/b/c"
			],
			true,
			[
				"/a/b/",
				"/a/b/c"
			],
			true,
			[
				"/a/b",
				"/a/b/c"
			],
			true,
			[
				"/a/b/c",
				"/a/b/d"
			],
			false, // TODO make sure!
			[
				"/a/b/c",
				"/a/b/"
			],
			false
		// TODO more tests
		],
		// TODO Uri.resolve
		"resolveAsSubordinate" : [
			[
				"http:/a/b",
				"/a/b"
			],
			"http:/a/b",
			[
				"http:/a/b",
				"/a/b/c/d"
			],
			"http:/a/b/c/d",
			[
				"http:/a/b/",
				"/a/b/c/d"
			],
			"http:/a/b/c/d",
			[
				"http:/a/b",
				"/x/y/c/d"
			],
			"Assertion failed: IllegalArgument, not subordinate",
			[
				"foo://username:password@my.example.com:8042/a/b?type=animal&name=narwhal#nose",
				"/a/b/c/d"
			],
			"foo://username:password@my.example.com:8042/a/b/c/d",
			[
				"foo://username:password@my.example.com:8042/a/b/",
				"http://jozko:mrkva@localhost:8080/a/b/c/d"
			],
			"Assertion failed: IllegalArgument, not subordinate", // different authority
			[
				"foo://username:password@my.example.com:8042/a/b/",
				"http://username:password@my.example.com:8042/a/b/c/d"
			],
			"http://username:password@my.example.com:8042/a/b/c/d",
			[
				"/a/b/",
				"/a/b/c/d"
			],
			"/a/b/c/d"
		],
		"parseId" : [
			"/a/b/1",
			1,
			"/a/b/1/",
			"Assertion failed: IllegalArgument, numeric id not present",
			"/a/b/c",
			"Assertion failed: IllegalArgument, numeric id not present"
		],
		"resolveSvcCtx" : [
			"/a/b/1",
			svcCtx + "/a/b/1",
			svcCtx + "/a/b/1", // if ctx is already present by mistake ...
			svcCtx + svcCtx + "/a/b/1", // ... output will contain 2 of then 
			"^/a/b/1",
			svcCtx + "/a/b/1",
			"/over/there/index.x.dtb?type=animal&name=narwhal#",
			svcCtx + "/over/there/index.x.dtb?type=animal&name=narwhal#",
			"http:/a/b/1",
			"Assertion failed: IllegalArgument, origin not expected",
			"http://localhost/a/b/1",
			"Assertion failed: IllegalArgument, origin not expected",
			"http://localhost:8080/a/b/1",
			"Assertion failed: IllegalArgument, origin not expected",
			"//localhost/a/b/1",
			"Assertion failed: IllegalArgument, origin not expected",
			[
				"/a/b/1",
				true
			],
			svcCtx + "/a/b/1",
			[
				svcCtx + "/a/b/1", // if ctx may be already present by design, use true as second parameter
				true
			],
			svcCtx + "/a/b/1", // ... to prevent duplicit ctx prefix
			[
				"^/a/b/1",
				true
			],
			svcCtx + "/a/b/1",
			[
				"/over/there/index.x.dtb?type=animal&name=narwhal#",
				true
			],
			svcCtx + "/over/there/index.x.dtb?type=animal&name=narwhal#",
			[
				svcCtx + "/over/there/index.x.dtb?type=animal&name=narwhal#",
				true
			],
			svcCtx + "/over/there/index.x.dtb?type=animal&name=narwhal#",
			[
				"http:/a/b/1",
				true
			],
			"Assertion failed: IllegalArgument, origin not expected",
			[
				"http://localhost/a/b/1",
				true
			],
			"Assertion failed: IllegalArgument, origin not expected",
			[
				"http://localhost:8080/a/b/1",
				true
			],
			"Assertion failed: IllegalArgument, origin not expected",
			[
				"//localhost/a/b/1",
				true
			],
			"Assertion failed: IllegalArgument, origin not expected"
		],
		"resolveUiCtx" : [
			"/a/b/1",
			uiCtx + "/a/b/1",
			"^/a/b/1",
			uiCtx + "/a/b/1",
			"/over/there/index.x.dtb?type=animal&name=narwhal#",
			uiCtx + "/over/there/index.x.dtb?type=animal&name=narwhal#",
			"http:/a/b/1",
			"Assertion failed: IllegalArgument, origin not expected",
			"http://localhost/a/b/1",
			"Assertion failed: IllegalArgument, origin not expected",
			"http://localhost:8080/a/b/1",
			"Assertion failed: IllegalArgument, origin not expected",
			"//localhost/a/b/1",
			"Assertion failed: IllegalArgument, origin not expected",
			[
				"/a/b/1",
				true
			],
			uiCtx + "/a/b/1",
			[
				uiCtx + "/a/b/1",
				true
			],
			uiCtx + "/a/b/1",
			[
				"/over/there/index.x.dtb?type=animal&name=narwhal#",
				true
			],
			uiCtx + "/over/there/index.x.dtb?type=animal&name=narwhal#"
		]
	};

	var getQueryAdditionalTest = {
		"Uri.getQuery(toObject=false) return values and types" : function() {

			doh.t(//
			Uri.getQuery("/test") === undefined && //
			Uri.getQuery("/test") === uri.decomposeComponents("/test").query, //
			"UNDEFINED if no question mark" //
			);

			doh.t(//
			Uri.getQuery("/test") === undefined && //
			Uri.getQuery("/test") === uri.decomposeComponents("/test").query, //
			"EMPTY STRING '' if question mark and nothing more" //
			);
		},

		"Uri.getQuery(toObject=true) return values and types (converion to object)" : function() {

			doh.t(Uri.getQuery("/test", true) === undefined,//
			"UNDEFINED if no question mark");

			doh.t(empty(Uri.getQuery("/test?", true)),//
			"{} object if question mark and nothing more");

			function empty(o) {
				return json.stringify(o) === "{}";
			}

			//
			doh.t(Uri.getQuery("/test", true) === uri.decomposeComponents("/test").query, //
			"consistent with old api");

		}

	};

	// test object
	var getterTest = {};
	object.forIn(getterTestData, function(data, methodName) {
		getterTest[methodName + "Test"] = getTest(methodName, data);
	});
	var setterTest = {};
	object.forIn(setterTestData, function(data, methodName) {
		setterTest[methodName + "Test"] = getTest(methodName, data);
	});
	var utilTest = {};
	object.forIn(utilTestData, function(data, methodName) {
		utilTest[methodName + "Test"] = getTest(methodName, data);
	});

	var origConf = {
		ctxPath : config.ctxPath,
		svcCtxPrefix : config.svcCtxPrefix,
		uiCtxPrefix : config.uiCtxPrefix
	};
	function setUp() {
		lang.mixin(config, {
			ctxPath : "/foo/app/ui",
			svcCtxPrefix : svcCtx,
			uiCtxPrefix : uiCtx
		});
	}

	function tearDown() {
		lang.mixin(config, origConf);
	}

	if (has("host-browser")) {
		doh.register("gjax/uri/Uri-getters", getterTest, setUp, tearDown);
		doh.register("gjax/uri/Uri-setters", setterTest, setUp, tearDown);
		doh.register("gjax/uri/Uri-utils", utilTest, setUp, tearDown);
		doh.register("gjax/uri/Uri-getQueryAdditionalTest", getQueryAdditionalTest, setUp, tearDown);
	} else {
		doh.register("gjax/uri/Uri-resolveCtx-tests", {

			"resolveUiCtx without and with config" : function() {
				// written to test new support for resolve*Ctx on server side
				// NTH: refactr to before
				delete config.__uiServer;
				delete config.__svcServer;
				config.uiCtxPrefix = "/ui";
				config.svcCtxPrefix = "/svc";

				doh.is("/ui/aaa", Uri.resolveUiCtx("/aaa"));
				doh.is("/svc/aaa", Uri.resolveSvcCtx("/aaa"));

				config.__uiServer = "https://ui.com:8080";
				config.__svcServer = "https://svc.com:8080";

				doh.is("https://ui.com:8080/ui/aaa", Uri.resolveUiCtx("/aaa"));
				doh.is("https://svc.com:8080/svc/aaa", Uri.resolveSvcCtx("/aaa"));
			}
		}, setUp, tearDown);

	}
	has("host-browser") || doh.run();
});
