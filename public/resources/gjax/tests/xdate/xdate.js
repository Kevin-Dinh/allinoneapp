/**
 * created 01/20/2015
 * 
 * @author marcus
 * @see http://livedocs.dojotoolkit.org/util/doh
 * @description brand new tests for 3rd rewrite of XDate library (from previous non dojo gjax versions)
 * 
 * not finished
 * 
 * @generated by TemplateWizard, v.2015/01/08 //do not remove this comment please
 */
define([
	"require",
	"doh",
	"dojo/has",
	//tested libraries
	"./lib/XDate3", //TODO: move to gjax
	"./lib/TimeZone",//TODO: move to gjax
	"dojo/_base/array"

], function(require, doh, has, XDate, TimeZone, array) {

	// not a real testcase more a demo of features and APIs.
	var featuresDemo = {

		"xdate.getTimeZone, XDate has timezone information" : function() {

			var x = new XDate();
			var tz = x.getTimeZone();

			doh.t(typeof tz === "object",//
			"TimeZone is objects");

			doh.t(tz === TimeZone.getDefault()), //
			"and by default is set to TimeZone.getDefault()";

			doh.t(tz === TimeZone.getInstance("BrowserDefaultZone"),//
			"which si by default 'special zone' BrowserDefaultZone");
		},
		"XDate behaves the same as Date when run in BrowserDefaultZone" : function() {
			var d, x;

			d = new Date();
			x = new XDate();

			doh.is(d.valueOf(), x.valueOf());

			var getters = array.filter(methods(Date.prototype), function(m) {
				return m.indexOf("get") === 0;
			});
			var supported = array.filter(getters, function(m) {
				return m in x;
			}); //NTH: unroll or extract at least
			array.forEach(supported, function(m) {
				var vd = d[m]();
				var vx = x[m]();
				console.debug(m, vd, vx);
				doh.is(vd, vx, "call to " + m + " shall return the same result");
			});
		},
		"You can change default time zone using: TimeZone.setDefault" : {
			setUp : function() {
				// store old timezone
				this._tz = TimeZone.getDefault();
				// set new timezone
				TimeZone.setDefault(TimeZone.getInstance("GMT"));
			},
			tearDown : function() {
				TimeZone.setDefault(this._tz);
			},
			runTest : function() {

				var d = new Date();
				var x = new XDate();

				doh.t(x.getTimeZone() === TimeZone.getInstance("GMT"),//
				"when setting TimeZone.setDefault, all xdates are then created with that timezone");

				doh.t(x.getHours() === x.getUTCHours(),//
				"in GMT hours and UTC hours are the same of course");

				assertRunningWithTimezone();

				doh.isNot(d.getHours(), x.getHours(),//
				"wallclock hours will now be different on XDate and Date");

				doh.is(d.getUTCHours(), x.getUTCHours(),//
				"but UTC hours will be same of course");
			}
		},
		"xdate.setTimeZone - You can 'change timezone' of your date" : function() {
			assertRunningWithTimezone();

			var x = new XDate();

			var wallHours = x.getHours();
			var utcHours = x.getUTCHours();
			var mils = x.valueOf();

			doh.t(x.getTimeZone() === TimeZone.getInstance("BrowserDefaultZone"),//
			"having date in default timezone with some hours set");

			x.setTimeZone(TimeZone.getInstance("GMT"));

			var wallHours2 = x.getHours();
			var utcHours2 = x.getUTCHours();
			var mils2 = x.valueOf();

			console.debug(wallHours, utcHours, mils);
			console.debug(wallHours2, utcHours2, mils2);

			doh.is(utcHours, utcHours2, //
			"changing timezone will not change UTC hours");

			doh.is(mils, mils2,//
			"changing timezone will not change mils");

			doh.isNot(wallHours, wallHours2,//
			"but will change wall hours of course");
		},
		"default and custom zones" : function() {

			var default1 = TimeZone.getInstance("BrowserDefaultZone");
			var default2 = TimeZone.getInstance("GMT");

			doh.t(default1 instanceof TimeZone && default2 instanceof TimeZone,//
			"TimeZone comes with 2 default zone, BrowserDefaultZone and GMT");

			// however they make no big improvement over standard Date, see custom zones
		},
		"Custom zones" : function() {

			var testResult = new doh.Deferred();

			// to use custom zone you must require zone data (somehow on your page)
			// FIXME: API for civilized timezone loading
			require([
				"./lib/data/Zone_Europe_Minsk"
			], function(_zoneData) {

				var minsk = new TimeZone(_zoneData.id, _zoneData._data, _zoneData._data2);

				var x = new XDate(1900, 0, 1, 2, 0, 0, minsk);
				doh.t(x.getTimeZone() === minsk,//
				"last param for constructor is timezone, which is then set to date");

				//at this time 01.01.1900 01:50:00 in minsk wall clock, 
				//they started to have vierd offset (+0150)

				doh.is(2, x.getHours(),//
				"number in constrator is wall clock time 02:00");
				doh.is(0, x.getMinutes(),//
				"number in constrator is wall clock time 02:00");

				doh.is(0, x.getUTCHours(),//
				"how ever in GMT is was 00:10");
				doh.is(10, x.getUTCMinutes(),//
				"how ever in GMT is was 00:10");

				testResult.callback();
			});
			return testResult;
		},
		"Replacement for standard Date objects - not used" : function() {
			var testResult = new doh.Deferred();

			// one of the main goal is to allow easy rewrite of 
			// current codes to use this XDate library instead of standard Date

			var GLOBAL_DATE = Date;

			require({
			//xdate:false
			}, [
				// this is the only added line in old AMD code
				"dojo/has!xdate?./lib/XDate3:./lib/Date"
			], function(Date) {

				doh.is(GLOBAL_DATE, Date, "XDate will be not used");

				testResult.callback();
			});

			return testResult;
		},
		"Replacement for standard Date objects - used" : function() {
			var testResult = new doh.Deferred();

			var GLOBAL_DATE = Date;

			require({
				has : {
					xdate : true
				// turn on
				}
			}, [
				// this is the only added line in old AMD code
				"dojo/has!xdate?./lib/XDate3:./lib/Date"
			], function(Date) {

				var d = new Date();
				doh.isNot(GLOBAL_DATE, Date, "now Date means something else");
				doh.t(d instanceof XDate, "its is XDate");
				doh.t(d instanceof Date, "this is tricky now !");

				testResult.callback();
			});

			return testResult;
		}

	};

	doh.register("xdate-featuresDemo", featuresDemo);

	// ---------------------------support -----------------------

	function assertRunningWithTimezone() {
		doh.isNot(0, new Date().getTimezoneOffset(), "This test requires NON ZERO timezone. Configure your JS runtime");
	}

	// not enumerable in ES5 
	var methods = Object.getOwnPropertyNames || function(o) {
		var methodNames = [];
		for ( var k in o) {
			if (typeof o[k] === "function") {
				methodNames.push(k);
			}
		}
		return methodNames;
	};

	var compareApiTest = {};
	var standardMethods = methods(Date.prototype);

	array.forEach(standardMethods, function(m) {
		compareApiTest["Date." + m] = function() {
			doh.t(m in (new XDate()), "XDate." + m + " shell be defined");
		};
	});

});
