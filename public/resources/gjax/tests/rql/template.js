/**
 * created 08/06/2013
 * 
 * @author mbeliansky
 * @see http://livedocs.dojotoolkit.org/util/doh
 * @description unit test for module "gjax/rql/template"
 * 
 * @generated by TemplateWizard, v.2013/01/03 //do not remove this comment please
 */
define([
	"doh",
	"dojo/_base/lang",
	"dojox/lang/functional",
	"./tests",
	//tested libraries
	"gjax/rql/template",
	"gjax/rql/toFIQL",
	"dojo/json"
], function(doh, lang, df, tests, rqlTemplate, toFIQL, json) {

	// registering custom operators
	rqlTemplate.unaryOperators.push("custom1");

	// TODO: test with prefilled arguments in template

	function parse(query, expected, object, options, useFIQL) {
		// tests are writen with/without FIQL syntax (readable reason)
		var rqlQueryObject = rqlTemplate.parse(query, options._operation);
		doh.is(expected, useFIQL ? toFIQL(rqlQueryObject) : rqlQueryObject.toString());
	}

	function feed(query, expected, object, options) { /*jshint expr:true */
		options || (options = {}); // SchemaStore des this too
		var rqlQuery, //
		objectStr = json.stringify(object), //
		optionsStr = json.stringify(options);
		try {
			rqlQuery = rqlTemplate.feed(query, object, options);
			doh.is(expected, rqlQuery);
			doh.is(objectStr, json.stringify(object), "Query object object should not be changed");
			doh.is(optionsStr, json.stringify(options), "Options object should not be changed");
			console.debug(rqlQuery);
		} catch (ex) {
			if (expected instanceof Error) {
				doh.is(expected.message, ex.message);
			} else { // not expected error, rethrow
				throw ex;
			}
		}
	}

	var testObject = {};
	df.forEach(tests.parse, lang.partial(_createTest, parse));
	doh.register("gjax/rql/template.parse()", testObject);

	testObject = {};
	df.forEach(tests.feed, lang.partial(_createTest, feed));
	doh.register("gjax/rql/template.feed()", testObject);

	function _createTest(func, testTmp) {
		var name = testTmp.testName, object = testTmp.object;
		// fill test object with functions
		df.forEach(testTmp.tests, function(expected, query) {
			testObject[name + "#" + query] = lang.partial(func, query, expected, object, testTmp.options, testTmp.useFIQL);
		});
	}
});
